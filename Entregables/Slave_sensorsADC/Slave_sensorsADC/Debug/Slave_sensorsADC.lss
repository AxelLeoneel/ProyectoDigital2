
Slave_sensorsADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000050e  000005a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  000005a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e90  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d5  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3f  00000000  00000000  00001f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  000029c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000643  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005df  00000000  00000000  0000322b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000380a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  9e:	0c 94 85 02 	jmp	0x50a	; 0x50a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <configChannel>:
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	b9 f0       	breq	.+46     	; 0xd8 <configChannel+0x32>
  aa:	28 f4       	brcc	.+10     	; 0xb6 <configChannel+0x10>
  ac:	88 23       	and	r24, r24
  ae:	41 f0       	breq	.+16     	; 0xc0 <configChannel+0x1a>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	61 f0       	breq	.+24     	; 0xcc <configChannel+0x26>
  b4:	29 c0       	rjmp	.+82     	; 0x108 <configChannel+0x62>
  b6:	86 30       	cpi	r24, 0x06	; 6
  b8:	a9 f0       	breq	.+42     	; 0xe4 <configChannel+0x3e>
  ba:	87 30       	cpi	r24, 0x07	; 7
  bc:	e1 f0       	breq	.+56     	; 0xf6 <configChannel+0x50>
  be:	24 c0       	rjmp	.+72     	; 0x108 <configChannel+0x62>
  c0:	ec e7       	ldi	r30, 0x7C	; 124
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret
  e4:	ec e7       	ldi	r30, 0x7C	; 124
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	86 60       	ori	r24, 0x06	; 6
  ec:	80 83       	st	Z, r24
  ee:	80 81       	ld	r24, Z
  f0:	86 7f       	andi	r24, 0xF6	; 246
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret
  f6:	ec e7       	ldi	r30, 0x7C	; 124
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	87 60       	ori	r24, 0x07	; 7
  fe:	80 83       	st	Z, r24
 100:	80 81       	ld	r24, Z
 102:	87 7f       	andi	r24, 0xF7	; 247
 104:	80 83       	st	Z, r24
 106:	08 95       	ret
 108:	ec e7       	ldi	r30, 0x7C	; 124
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <configADC>:
 114:	ec e7       	ldi	r30, 0x7C	; 124
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	10 82       	st	Z, r1
 11a:	90 81       	ld	r25, Z
 11c:	90 64       	ori	r25, 0x40	; 64
 11e:	90 83       	st	Z, r25
 120:	90 81       	ld	r25, Z
 122:	9f 7d       	andi	r25, 0xDF	; 223
 124:	90 83       	st	Z, r25
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <configChannel>
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	10 82       	st	Z, r1
 130:	80 81       	ld	r24, Z
 132:	88 60       	ori	r24, 0x08	; 8
 134:	80 83       	st	Z, r24
 136:	80 81       	ld	r24, Z
 138:	87 60       	ori	r24, 0x07	; 7
 13a:	80 83       	st	Z, r24
 13c:	80 81       	ld	r24, Z
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	80 83       	st	Z, r24
 142:	80 81       	ld	r24, Z
 144:	80 64       	ori	r24, 0x40	; 64
 146:	80 83       	st	Z, r24
 148:	08 95       	ret

0000014a <setup>:

/********************************************************************/
/*---------------------Non-interrupt Subroutines--------------------*/
void setup()
{
	cli();
 14a:	f8 94       	cli
	// Entradas
	


	// Salidas
	DDRD |= (1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4);							// Led indicadores
 14c:	8a b1       	in	r24, 0x0a	; 10
 14e:	8c 61       	ori	r24, 0x1C	; 28
 150:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4));
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	83 7e       	andi	r24, 0xE3	; 227
 156:	8b b9       	out	0x0b, r24	; 11
	
	
	// Configuracion ADC
	configADC(channel1);
 158:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <channel1>
 15c:	0e 94 8a 00 	call	0x114	; 0x114 <configADC>
	
	// I2C configuracion
	TWI_Slave_Init(slave_Address);
 160:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <slave_Address>
 164:	0e 94 6f 02 	call	0x4de	; 0x4de <TWI_Slave_Init>
	
	// Config PWM
	init_pwm1(non_invert, 64);
 168:	60 e4       	ldi	r22, 0x40	; 64
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 03 02 	call	0x406	; 0x406 <init_pwm1>
	
	// Posicion inicial
	DutyCycle1(SERVO_MIN);
 172:	80 ed       	ldi	r24, 0xD0	; 208
 174:	97 e0       	ldi	r25, 0x07	; 7
 176:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DutyCycle1>
		
	
	sei();
 17a:	78 94       	sei
 17c:	08 95       	ret

0000017e <traffic_light>:
}

void traffic_light()
{
	PORTD &= ~((1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4));
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	83 7e       	andi	r24, 0xE3	; 227
 182:	8b b9       	out	0x0b, r24	; 11
	
	if(G){
 184:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <G>
 188:	88 23       	and	r24, r24
 18a:	19 f0       	breq	.+6      	; 0x192 <traffic_light+0x14>
		PORTD |= (1 << PORTD2);
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	8b b9       	out	0x0b, r24	; 11
	}
	if(Y){
 192:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Y>
 196:	88 23       	and	r24, r24
 198:	19 f0       	breq	.+6      	; 0x1a0 <traffic_light+0x22>
		PORTD |= (1 << PORTD3);
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	88 60       	ori	r24, 0x08	; 8
 19e:	8b b9       	out	0x0b, r24	; 11
	}
	if(R){
 1a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <R>
 1a4:	88 23       	and	r24, r24
 1a6:	19 f0       	breq	.+6      	; 0x1ae <traffic_light+0x30>
		PORTD |= (1 << PORTD4);
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	08 95       	ret

000001b0 <calculate_rain_percentage>:
	const uint16_t MAX_RESISTANCE = 100;
	const uint16_t MIN_RESISTANCE = 0;
	const uint16_t DRY_VALUE = 30;
	const uint16_t WET_VALUE = 600;
	
	if(adc_value < DRY_VALUE) return MAX_RESISTANCE;
 1b0:	8e 31       	cpi	r24, 0x1E	; 30
 1b2:	91 05       	cpc	r25, r1
 1b4:	c0 f0       	brcs	.+48     	; 0x1e6 <calculate_rain_percentage+0x36>
	if(adc_value > WET_VALUE) return MIN_RESISTANCE;
 1b6:	89 35       	cpi	r24, 0x59	; 89
 1b8:	22 e0       	ldi	r18, 0x02	; 2
 1ba:	92 07       	cpc	r25, r18
 1bc:	b0 f4       	brcc	.+44     	; 0x1ea <calculate_rain_percentage+0x3a>
	
	return MAX_RESISTANCE - ((adc_value - DRY_VALUE) * (MAX_RESISTANCE - MIN_RESISTANCE) / (WET_VALUE - DRY_VALUE));
 1be:	44 e6       	ldi	r20, 0x64	; 100
 1c0:	48 9f       	mul	r20, r24
 1c2:	90 01       	movw	r18, r0
 1c4:	49 9f       	mul	r20, r25
 1c6:	30 0d       	add	r19, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	28 5b       	subi	r18, 0xB8	; 184
 1cc:	3b 40       	sbci	r19, 0x0B	; 11
 1ce:	ad e7       	ldi	r26, 0x7D	; 125
 1d0:	b9 e3       	ldi	r27, 0x39	; 57
 1d2:	0e 94 76 02 	call	0x4ec	; 0x4ec <__umulhisi3>
 1d6:	88 0f       	add	r24, r24
 1d8:	89 2f       	mov	r24, r25
 1da:	88 1f       	adc	r24, r24
 1dc:	99 0b       	sbc	r25, r25
 1de:	91 95       	neg	r25
 1e0:	48 1b       	sub	r20, r24
 1e2:	84 2f       	mov	r24, r20
 1e4:	08 95       	ret
	const uint16_t MAX_RESISTANCE = 100;
	const uint16_t MIN_RESISTANCE = 0;
	const uint16_t DRY_VALUE = 30;
	const uint16_t WET_VALUE = 600;
	
	if(adc_value < DRY_VALUE) return MAX_RESISTANCE;
 1e6:	84 e6       	ldi	r24, 0x64	; 100
 1e8:	08 95       	ret
	if(adc_value > WET_VALUE) return MIN_RESISTANCE;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
	
	return MAX_RESISTANCE - ((adc_value - DRY_VALUE) * (MAX_RESISTANCE - MIN_RESISTANCE) / (WET_VALUE - DRY_VALUE));
}
 1ec:	08 95       	ret

000001ee <update_servo_position>:

void update_servo_position(uint8_t pecentage)
{
	uint16_t servo_pos;
	
	if(pecentage >= 45){
 1ee:	8d 32       	cpi	r24, 0x2D	; 45
 1f0:	28 f0       	brcs	.+10     	; 0x1fc <update_servo_position+0xe>
		DutyCycle1(SERVO_MAX);
 1f2:	80 ea       	ldi	r24, 0xA0	; 160
 1f4:	9f e0       	ldi	r25, 0x0F	; 15
 1f6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DutyCycle1>
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <update_servo_position+0x16>
	}else{
		DutyCycle1(SERVO_MIN);
 1fc:	80 ed       	ldi	r24, 0xD0	; 208
 1fe:	97 e0       	ldi	r25, 0x07	; 7
 200:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DutyCycle1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	89 ef       	ldi	r24, 0xF9	; 249
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <update_servo_position+0x1c>
 212:	00 c0       	rjmp	.+0      	; 0x214 <update_servo_position+0x26>
 214:	00 00       	nop
 216:	08 95       	ret

00000218 <main>:

/********************************************************************/
/*------------------------------Main--------------------------------*/
int main(void)
{
	setup();
 218:	0e 94 a5 00 	call	0x14a	; 0x14a <setup>
	
	while (1)
	{
		traffic_light();
 21c:	0e 94 bf 00 	call	0x17e	; 0x17e <traffic_light>
		
		// Control del servomotor
		if(rain_percent >= 45 && !servo_moved){
 220:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rain_percent>
 224:	8d 32       	cpi	r24, 0x2D	; 45
 226:	60 f0       	brcs	.+24     	; 0x240 <main+0x28>
 228:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 22c:	81 11       	cpse	r24, r1
 22e:	08 c0       	rjmp	.+16     	; 0x240 <main+0x28>
			update_servo_position(rain_percent);
 230:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rain_percent>
 234:	0e 94 f7 00 	call	0x1ee	; 0x1ee <update_servo_position>
			servo_moved = 1;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 23e:	ee cf       	rjmp	.-36     	; 0x21c <main+0x4>
		}
		else if(rain_percent < 45 && servo_moved){
 240:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rain_percent>
 244:	8d 32       	cpi	r24, 0x2D	; 45
 246:	50 f7       	brcc	.-44     	; 0x21c <main+0x4>
 248:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 24c:	88 23       	and	r24, r24
 24e:	31 f3       	breq	.-52     	; 0x21c <main+0x4>
			update_servo_position(0);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 f7 00 	call	0x1ee	; 0x1ee <update_servo_position>
			servo_moved = 0;
 256:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 25a:	e0 cf       	rjmp	.-64     	; 0x21c <main+0x4>

0000025c <__vector_21>:


/********************************************************************/
/*----------------------Interrupt Subroutines-----------------------*/
ISR(ADC_vect)
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	2f 93       	push	r18
 268:	3f 93       	push	r19
 26a:	4f 93       	push	r20
 26c:	5f 93       	push	r21
 26e:	6f 93       	push	r22
 270:	7f 93       	push	r23
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
	if(current_channel == 1){
 27e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	09 f0       	breq	.+2      	; 0x288 <__vector_21+0x2c>
 286:	47 c0       	rjmp	.+142    	; 0x316 <__vector_21+0xba>
		// Leemos el MQ-135
		adc_val1 = ADC;
 288:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 28c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 290:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <adc_val1+0x1>
 294:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <adc_val1>
		
		// Umbrales para MQ-135
		if(adc_val1 < 60){
 298:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_val1>
 29c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <adc_val1+0x1>
 2a0:	cc 97       	sbiw	r24, 0x3c	; 60
 2a2:	40 f4       	brcc	.+16     	; 0x2b4 <__vector_21+0x58>
			G = 1;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <G>
			Y = 0;
 2aa:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Y>
			R = 0;
 2ae:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <R>
 2b2:	2a c0       	rjmp	.+84     	; 0x308 <__vector_21+0xac>
		}
		else if(adc_val1 >= 60 && adc_val1 < 200){
 2b4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_val1>
 2b8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <adc_val1+0x1>
 2bc:	cc 97       	sbiw	r24, 0x3c	; 60
 2be:	78 f0       	brcs	.+30     	; 0x2de <__vector_21+0x82>
 2c0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_val1>
 2c4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <adc_val1+0x1>
 2c8:	88 3c       	cpi	r24, 0xC8	; 200
 2ca:	91 05       	cpc	r25, r1
 2cc:	40 f4       	brcc	.+16     	; 0x2de <__vector_21+0x82>
			G = 0;
 2ce:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <G>
			Y = 1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Y>
			R = 0;
 2d8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <R>
 2dc:	15 c0       	rjmp	.+42     	; 0x308 <__vector_21+0xac>
		}
		else if(adc_val1 >= 200 &&  adc_val1 < 600){
 2de:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_val1>
 2e2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <adc_val1+0x1>
 2e6:	88 3c       	cpi	r24, 0xC8	; 200
 2e8:	91 05       	cpc	r25, r1
 2ea:	70 f0       	brcs	.+28     	; 0x308 <__vector_21+0xac>
 2ec:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_val1>
 2f0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <adc_val1+0x1>
 2f4:	88 35       	cpi	r24, 0x58	; 88
 2f6:	92 40       	sbci	r25, 0x02	; 2
 2f8:	38 f4       	brcc	.+14     	; 0x308 <__vector_21+0xac>
			G = 0;
 2fa:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <G>
			Y = 0;
 2fe:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Y>
			R = 1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <R>
		}
		
		// Cambiamos de sensor
		current_channel = 0;
 308:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		configChannel(current_channel);
 30c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 310:	0e 94 53 00 	call	0xa6	; 0xa6 <configChannel>
 314:	17 c0       	rjmp	.+46     	; 0x344 <__vector_21+0xe8>
	}
	else{
		rain_adc = ADC;
 316:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 31a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 31e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <rain_adc+0x1>
 322:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rain_adc>
		
		// Porcentaje
		rain_percent = calculate_rain_percentage(rain_adc);
 326:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rain_adc>
 32a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <rain_adc+0x1>
 32e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <calculate_rain_percentage>
 332:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rain_percent>
		
		// Volvemos a MQ-135
		current_channel = 1;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		configChannel(current_channel);
 33c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 340:	0e 94 53 00 	call	0xa6	; 0xa6 <configChannel>
	}
	
	ADCSRA |= (1 << ADSC);							// Empezamos nueva conversion
 344:	ea e7       	ldi	r30, 0x7A	; 122
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	80 64       	ori	r24, 0x40	; 64
 34c:	80 83       	st	Z, r24
}
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__vector_24>:

ISR(TWI_vect)
{
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	8f 93       	push	r24
 37c:	9f 93       	push	r25
	uint8_t state;
	state = TWSR & 0xFC;
 37e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 382:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(state)
 384:	80 38       	cpi	r24, 0x80	; 128
 386:	89 f0       	breq	.+34     	; 0x3aa <__vector_24+0x3a>
 388:	28 f4       	brcc	.+10     	; 0x394 <__vector_24+0x24>
 38a:	80 36       	cpi	r24, 0x60	; 96
 38c:	51 f0       	breq	.+20     	; 0x3a2 <__vector_24+0x32>
 38e:	80 37       	cpi	r24, 0x70	; 112
 390:	41 f0       	breq	.+16     	; 0x3a2 <__vector_24+0x32>
 392:	2f c0       	rjmp	.+94     	; 0x3f2 <__vector_24+0x82>
 394:	88 3a       	cpi	r24, 0xA8	; 168
 396:	89 f0       	breq	.+34     	; 0x3ba <__vector_24+0x4a>
 398:	88 3b       	cpi	r24, 0xB8	; 184
 39a:	39 f1       	breq	.+78     	; 0x3ea <__vector_24+0x7a>
 39c:	80 39       	cpi	r24, 0x90	; 144
 39e:	49 f5       	brne	.+82     	; 0x3f2 <__vector_24+0x82>
 3a0:	04 c0       	rjmp	.+8      	; 0x3aa <__vector_24+0x3a>
	{
		// Slave Receiver
		case 0x60:
		case 0x70:
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 3a2:	85 ec       	ldi	r24, 0xC5	; 197
 3a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 3a8:	27 c0       	rjmp	.+78     	; 0x3f8 <__vector_24+0x88>
		
		case 0x80:
		case 0x90:
		buffer = TWDR;
 3aa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3ae:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <buffer>
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 3b2:	85 ec       	ldi	r24, 0xC5	; 197
 3b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 3b8:	1f c0       	rjmp	.+62     	; 0x3f8 <__vector_24+0x88>
		
		// Slave Transmitter
		case 0xA8:
		
		if(buffer == 1){
 3ba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <buffer>
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	39 f4       	brne	.+14     	; 0x3d0 <__vector_24+0x60>
			TWDR = adc_val1;
 3c2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_val1>
 3c6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <adc_val1+0x1>
 3ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <__vector_24+0x72>
		}
		else if(buffer == 2){
 3d0:	82 30       	cpi	r24, 0x02	; 2
 3d2:	29 f4       	brne	.+10     	; 0x3de <__vector_24+0x6e>
			TWDR = rain_percent; 
 3d4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rain_percent>
 3d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <__vector_24+0x72>
		}
		else{
			TWDR = 0;
 3de:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		}
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 3e2:	85 ec       	ldi	r24, 0xC5	; 197
 3e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <__vector_24+0x88>
		
		case 0xB8:
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 3ea:	85 ec       	ldi	r24, 0xC5	; 197
 3ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <__vector_24+0x88>
		
		default:
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 3f2:	85 ec       	ldi	r24, 0xC5	; 197
 3f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
	}
}
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <init_pwm1>:
 406:	94 b1       	in	r25, 0x04	; 4
 408:	92 60       	ori	r25, 0x02	; 2
 40a:	94 b9       	out	0x04, r25	; 4
 40c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 410:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	49 f4       	brne	.+18     	; 0x42a <init_pwm1+0x24>
 418:	e0 e8       	ldi	r30, 0x80	; 128
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	80 6c       	ori	r24, 0xC0	; 192
 420:	80 83       	st	Z, r24
 422:	80 81       	ld	r24, Z
 424:	80 63       	ori	r24, 0x30	; 48
 426:	80 83       	st	Z, r24
 428:	08 c0       	rjmp	.+16     	; 0x43a <init_pwm1+0x34>
 42a:	e0 e8       	ldi	r30, 0x80	; 128
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	80 68       	ori	r24, 0x80	; 128
 432:	80 83       	st	Z, r24
 434:	80 81       	ld	r24, Z
 436:	80 62       	ori	r24, 0x20	; 32
 438:	80 83       	st	Z, r24
 43a:	e0 e8       	ldi	r30, 0x80	; 128
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	82 60       	ori	r24, 0x02	; 2
 442:	80 83       	st	Z, r24
 444:	e1 e8       	ldi	r30, 0x81	; 129
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	88 61       	ori	r24, 0x18	; 24
 44c:	80 83       	st	Z, r24
 44e:	60 34       	cpi	r22, 0x40	; 64
 450:	71 05       	cpc	r23, r1
 452:	e1 f0       	breq	.+56     	; 0x48c <init_pwm1+0x86>
 454:	38 f4       	brcc	.+14     	; 0x464 <init_pwm1+0x5e>
 456:	61 30       	cpi	r22, 0x01	; 1
 458:	71 05       	cpc	r23, r1
 45a:	61 f0       	breq	.+24     	; 0x474 <init_pwm1+0x6e>
 45c:	68 30       	cpi	r22, 0x08	; 8
 45e:	71 05       	cpc	r23, r1
 460:	79 f0       	breq	.+30     	; 0x480 <init_pwm1+0x7a>
 462:	26 c0       	rjmp	.+76     	; 0x4b0 <init_pwm1+0xaa>
 464:	61 15       	cp	r22, r1
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	78 07       	cpc	r23, r24
 46a:	b1 f0       	breq	.+44     	; 0x498 <init_pwm1+0x92>
 46c:	61 15       	cp	r22, r1
 46e:	74 40       	sbci	r23, 0x04	; 4
 470:	c9 f0       	breq	.+50     	; 0x4a4 <init_pwm1+0x9e>
 472:	1e c0       	rjmp	.+60     	; 0x4b0 <init_pwm1+0xaa>
 474:	e1 e8       	ldi	r30, 0x81	; 129
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	81 60       	ori	r24, 0x01	; 1
 47c:	80 83       	st	Z, r24
 47e:	1d c0       	rjmp	.+58     	; 0x4ba <init_pwm1+0xb4>
 480:	e1 e8       	ldi	r30, 0x81	; 129
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	82 60       	ori	r24, 0x02	; 2
 488:	80 83       	st	Z, r24
 48a:	17 c0       	rjmp	.+46     	; 0x4ba <init_pwm1+0xb4>
 48c:	e1 e8       	ldi	r30, 0x81	; 129
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	83 60       	ori	r24, 0x03	; 3
 494:	80 83       	st	Z, r24
 496:	11 c0       	rjmp	.+34     	; 0x4ba <init_pwm1+0xb4>
 498:	e1 e8       	ldi	r30, 0x81	; 129
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	84 60       	ori	r24, 0x04	; 4
 4a0:	80 83       	st	Z, r24
 4a2:	0b c0       	rjmp	.+22     	; 0x4ba <init_pwm1+0xb4>
 4a4:	e1 e8       	ldi	r30, 0x81	; 129
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	85 60       	ori	r24, 0x05	; 5
 4ac:	80 83       	st	Z, r24
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <init_pwm1+0xb4>
 4b0:	e1 e8       	ldi	r30, 0x81	; 129
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	81 60       	ori	r24, 0x01	; 1
 4b8:	80 83       	st	Z, r24
 4ba:	8f e3       	ldi	r24, 0x3F	; 63
 4bc:	9c e9       	ldi	r25, 0x9C	; 156
 4be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 4c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 4c6:	80 ed       	ldi	r24, 0xD0	; 208
 4c8:	97 e0       	ldi	r25, 0x07	; 7
 4ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 4d2:	08 95       	ret

000004d4 <DutyCycle1>:
 4d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 4dc:	08 95       	ret

000004de <TWI_Slave_Init>:
 4de:	88 0f       	add	r24, r24
 4e0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
 4e4:	85 e4       	ldi	r24, 0x45	; 69
 4e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4ea:	08 95       	ret

000004ec <__umulhisi3>:
 4ec:	a2 9f       	mul	r26, r18
 4ee:	b0 01       	movw	r22, r0
 4f0:	b3 9f       	mul	r27, r19
 4f2:	c0 01       	movw	r24, r0
 4f4:	a3 9f       	mul	r26, r19
 4f6:	70 0d       	add	r23, r0
 4f8:	81 1d       	adc	r24, r1
 4fa:	11 24       	eor	r1, r1
 4fc:	91 1d       	adc	r25, r1
 4fe:	b2 9f       	mul	r27, r18
 500:	70 0d       	add	r23, r0
 502:	81 1d       	adc	r24, r1
 504:	11 24       	eor	r1, r1
 506:	91 1d       	adc	r25, r1
 508:	08 95       	ret

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>
