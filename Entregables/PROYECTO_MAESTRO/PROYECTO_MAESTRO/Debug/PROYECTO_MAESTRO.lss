
PROYECTO_MAESTRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00001188  0000121c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001188  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800118  00800118  00001234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a72  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1d  00000000  00000000  00002e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c4c  00000000  00000000  0000395b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  000045a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000681  00000000  00000000  0000480c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a8a  00000000  00000000  00004e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005917  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__addsf3x+0x9e>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <program+0x154>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <Two_Wire_Bit_Rate+0x90>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <LCD_Port+0x2e>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e8 e8       	ldi	r30, 0x88	; 136
     176:	f1 e1       	ldi	r31, 0x11	; 17
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a8 31       	cpi	r26, 0x18	; 24
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	a8 e1       	ldi	r26, 0x18	; 24
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	ae 33       	cpi	r26, 0x3E	; 62
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <main>
     198:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <LCD_Port>:
}
// Move to the left
void LCD_Shift_Left(void)
{
	LCD_CMD(0x01);
	LCD_CMD(0x08);
     1a0:	80 ff       	sbrs	r24, 0
     1a2:	04 c0       	rjmp	.+8      	; 0x1ac <LCD_Port+0xc>
     1a4:	95 b1       	in	r25, 0x05	; 5
     1a6:	94 60       	ori	r25, 0x04	; 4
     1a8:	95 b9       	out	0x05, r25	; 5
     1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <LCD_Port+0x12>
     1ac:	95 b1       	in	r25, 0x05	; 5
     1ae:	9b 7f       	andi	r25, 0xFB	; 251
     1b0:	95 b9       	out	0x05, r25	; 5
     1b2:	81 ff       	sbrs	r24, 1
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <LCD_Port+0x1e>
     1b6:	95 b1       	in	r25, 0x05	; 5
     1b8:	98 60       	ori	r25, 0x08	; 8
     1ba:	95 b9       	out	0x05, r25	; 5
     1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <LCD_Port+0x24>
     1be:	95 b1       	in	r25, 0x05	; 5
     1c0:	97 7f       	andi	r25, 0xF7	; 247
     1c2:	95 b9       	out	0x05, r25	; 5
     1c4:	82 ff       	sbrs	r24, 2
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <LCD_Port+0x30>
     1c8:	95 b1       	in	r25, 0x05	; 5
     1ca:	90 61       	ori	r25, 0x10	; 16
     1cc:	95 b9       	out	0x05, r25	; 5
     1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <LCD_Port+0x36>
     1d0:	95 b1       	in	r25, 0x05	; 5
     1d2:	9f 7e       	andi	r25, 0xEF	; 239
     1d4:	95 b9       	out	0x05, r25	; 5
     1d6:	83 ff       	sbrs	r24, 3
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <LCD_Port+0x42>
     1da:	85 b1       	in	r24, 0x05	; 5
     1dc:	80 62       	ori	r24, 0x20	; 32
     1de:	85 b9       	out	0x05, r24	; 5
     1e0:	08 95       	ret
     1e2:	85 b1       	in	r24, 0x05	; 5
     1e4:	8f 7d       	andi	r24, 0xDF	; 223
     1e6:	85 b9       	out	0x05, r24	; 5
     1e8:	08 95       	ret

000001ea <LCD_CMD>:
     1ea:	95 b1       	in	r25, 0x05	; 5
     1ec:	9e 7f       	andi	r25, 0xFE	; 254
     1ee:	95 b9       	out	0x05, r25	; 5
     1f0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Port>
     1f4:	85 b1       	in	r24, 0x05	; 5
     1f6:	82 60       	ori	r24, 0x02	; 2
     1f8:	85 b9       	out	0x05, r24	; 5
     1fa:	8f e7       	ldi	r24, 0x7F	; 127
     1fc:	9e e3       	ldi	r25, 0x3E	; 62
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_CMD+0x14>
     202:	00 c0       	rjmp	.+0      	; 0x204 <LCD_CMD+0x1a>
     204:	00 00       	nop
     206:	85 b1       	in	r24, 0x05	; 5
     208:	8d 7f       	andi	r24, 0xFD	; 253
     20a:	85 b9       	out	0x05, r24	; 5
     20c:	08 95       	ret

0000020e <initLCD_4_bits>:
     20e:	84 b1       	in	r24, 0x04	; 4
     210:	8f 63       	ori	r24, 0x3F	; 63
     212:	84 b9       	out	0x04, r24	; 4
     214:	15 b8       	out	0x05, r1	; 5
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Port>
     21c:	2f ef       	ldi	r18, 0xFF	; 255
     21e:	86 e7       	ldi	r24, 0x76	; 118
     220:	91 e0       	ldi	r25, 0x01	; 1
     222:	21 50       	subi	r18, 0x01	; 1
     224:	80 40       	sbci	r24, 0x00	; 0
     226:	90 40       	sbci	r25, 0x00	; 0
     228:	e1 f7       	brne	.-8      	; 0x222 <initLCD_4_bits+0x14>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <initLCD_4_bits+0x1e>
     22c:	00 00       	nop
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     234:	8f e1       	ldi	r24, 0x1F	; 31
     236:	9e e4       	ldi	r25, 0x4E	; 78
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <initLCD_4_bits+0x2a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <initLCD_4_bits+0x30>
     23e:	00 00       	nop
     240:	83 e0       	ldi	r24, 0x03	; 3
     242:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     246:	8f ed       	ldi	r24, 0xDF	; 223
     248:	9b ea       	ldi	r25, 0xAB	; 171
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <initLCD_4_bits+0x3c>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <initLCD_4_bits+0x42>
     250:	00 00       	nop
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     264:	88 e0       	ldi	r24, 0x08	; 8
     266:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     270:	8c e0       	ldi	r24, 0x0C	; 12
     272:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     27c:	86 e0       	ldi	r24, 0x06	; 6
     27e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     28e:	08 95       	ret

00000290 <LCD_Write_Char>:
     290:	cf 93       	push	r28
     292:	c8 2f       	mov	r28, r24
     294:	cf 70       	andi	r28, 0x0F	; 15
     296:	95 b1       	in	r25, 0x05	; 5
     298:	91 60       	ori	r25, 0x01	; 1
     29a:	95 b9       	out	0x05, r25	; 5
     29c:	82 95       	swap	r24
     29e:	8f 70       	andi	r24, 0x0F	; 15
     2a0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Port>
     2a4:	85 b1       	in	r24, 0x05	; 5
     2a6:	82 60       	ori	r24, 0x02	; 2
     2a8:	85 b9       	out	0x05, r24	; 5
     2aa:	8f e7       	ldi	r24, 0x7F	; 127
     2ac:	9e e3       	ldi	r25, 0x3E	; 62
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_Write_Char+0x1e>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <LCD_Write_Char+0x24>
     2b4:	00 00       	nop
     2b6:	85 b1       	in	r24, 0x05	; 5
     2b8:	8d 7f       	andi	r24, 0xFD	; 253
     2ba:	85 b9       	out	0x05, r24	; 5
     2bc:	8c 2f       	mov	r24, r28
     2be:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Port>
     2c2:	85 b1       	in	r24, 0x05	; 5
     2c4:	82 60       	ori	r24, 0x02	; 2
     2c6:	85 b9       	out	0x05, r24	; 5
     2c8:	8f e7       	ldi	r24, 0x7F	; 127
     2ca:	9e e3       	ldi	r25, 0x3E	; 62
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_Write_Char+0x3c>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_Write_Char+0x42>
     2d2:	00 00       	nop
     2d4:	85 b1       	in	r24, 0x05	; 5
     2d6:	8d 7f       	andi	r24, 0xFD	; 253
     2d8:	85 b9       	out	0x05, r24	; 5
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <LCD_Write_String>:
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	8c 01       	movw	r16, r24
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
     2ea:	d0 e0       	ldi	r29, 0x00	; 0
     2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <LCD_Write_String+0x16>
     2ee:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Write_Char>
     2f2:	21 96       	adiw	r28, 0x01	; 1
     2f4:	f8 01       	movw	r30, r16
     2f6:	ec 0f       	add	r30, r28
     2f8:	fd 1f       	adc	r31, r29
     2fa:	80 81       	ld	r24, Z
     2fc:	81 11       	cpse	r24, r1
     2fe:	f7 cf       	rjmp	.-18     	; 0x2ee <LCD_Write_String+0x10>
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	08 95       	ret

0000030a <LCD_Set_Cursor>:
}
// Set cursor on a 16 x 2 position
void LCD_Set_Cursor(char column, char row)
{
     30a:	cf 93       	push	r28
	// Define temporal char and divide byte into high and low parts
	char temporal, tempHIGH, tempLOW;
	if (row == 1)
     30c:	61 30       	cpi	r22, 0x01	; 1
     30e:	59 f4       	brne	.+22     	; 0x326 <LCD_Set_Cursor+0x1c>
	{
		temporal = 0x80 + column - 1;
     310:	81 58       	subi	r24, 0x81	; 129
		tempHIGH = (temporal & 0xF0) >> 4;
		tempLOW = temporal & 0x0F;
     312:	c8 2f       	mov	r28, r24
     314:	cf 70       	andi	r28, 0x0F	; 15
		LCD_CMD(tempHIGH);
     316:	82 95       	swap	r24
     318:	8f 70       	andi	r24, 0x0F	; 15
     31a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
		LCD_CMD(tempLOW);
     31e:	8c 2f       	mov	r24, r28
     320:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
     324:	0c c0       	rjmp	.+24     	; 0x33e <LCD_Set_Cursor+0x34>
	}
	else if (row == 2)
     326:	62 30       	cpi	r22, 0x02	; 2
     328:	51 f4       	brne	.+20     	; 0x33e <LCD_Set_Cursor+0x34>
	{
		temporal = 0xC0 + column - 1;
     32a:	81 54       	subi	r24, 0x41	; 65
		tempHIGH = (temporal & 0xF0) >> 4;
		tempLOW = temporal & 0x0F;
     32c:	c8 2f       	mov	r28, r24
     32e:	cf 70       	andi	r28, 0x0F	; 15
		LCD_CMD(tempHIGH);
     330:	82 95       	swap	r24
     332:	8f 70       	andi	r24, 0x0F	; 15
     334:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
		LCD_CMD(tempLOW);
     338:	8c 2f       	mov	r24, r28
     33a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_CMD>
	}
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <init_TWI_pins>:
void TWI_Slave_Init(uint8_t slave_Address)
{
	// Assign address to slave
	TWAR = (slave_Address << 1);
	// Enable Two Wire, Interruption and ACK
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
     342:	87 b1       	in	r24, 0x07	; 7
     344:	8f 7c       	andi	r24, 0xCF	; 207
     346:	87 b9       	out	0x07, r24	; 7
     348:	88 b1       	in	r24, 0x08	; 8
     34a:	8f 7c       	andi	r24, 0xCF	; 207
     34c:	88 b9       	out	0x08, r24	; 8
     34e:	08 95       	ret

00000350 <Two_Wire_Bit_Rate>:
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	8b 01       	movw	r16, r22
     358:	9c 01       	movw	r18, r24
     35a:	c4 2f       	mov	r28, r20
     35c:	44 30       	cpi	r20, 0x04	; 4
     35e:	79 f0       	breq	.+30     	; 0x37e <Two_Wire_Bit_Rate+0x2e>
     360:	18 f4       	brcc	.+6      	; 0x368 <Two_Wire_Bit_Rate+0x18>
     362:	41 30       	cpi	r20, 0x01	; 1
     364:	31 f0       	breq	.+12     	; 0x372 <Two_Wire_Bit_Rate+0x22>
     366:	23 c0       	rjmp	.+70     	; 0x3ae <Two_Wire_Bit_Rate+0x5e>
     368:	40 31       	cpi	r20, 0x10	; 16
     36a:	91 f0       	breq	.+36     	; 0x390 <Two_Wire_Bit_Rate+0x40>
     36c:	40 34       	cpi	r20, 0x40	; 64
     36e:	c9 f0       	breq	.+50     	; 0x3a2 <Two_Wire_Bit_Rate+0x52>
     370:	1e c0       	rjmp	.+60     	; 0x3ae <Two_Wire_Bit_Rate+0x5e>
     372:	e9 eb       	ldi	r30, 0xB9	; 185
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	8c 7f       	andi	r24, 0xFC	; 252
     37a:	80 83       	st	Z, r24
     37c:	1e c0       	rjmp	.+60     	; 0x3ba <Two_Wire_Bit_Rate+0x6a>
     37e:	e9 eb       	ldi	r30, 0xB9	; 185
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	8d 7f       	andi	r24, 0xFD	; 253
     386:	80 83       	st	Z, r24
     388:	80 81       	ld	r24, Z
     38a:	81 60       	ori	r24, 0x01	; 1
     38c:	80 83       	st	Z, r24
     38e:	15 c0       	rjmp	.+42     	; 0x3ba <Two_Wire_Bit_Rate+0x6a>
     390:	e9 eb       	ldi	r30, 0xB9	; 185
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	8e 7f       	andi	r24, 0xFE	; 254
     398:	80 83       	st	Z, r24
     39a:	80 81       	ld	r24, Z
     39c:	82 60       	ori	r24, 0x02	; 2
     39e:	80 83       	st	Z, r24
     3a0:	0c c0       	rjmp	.+24     	; 0x3ba <Two_Wire_Bit_Rate+0x6a>
     3a2:	e9 eb       	ldi	r30, 0xB9	; 185
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	80 81       	ld	r24, Z
     3a8:	83 60       	ori	r24, 0x03	; 3
     3aa:	80 83       	st	Z, r24
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <Two_Wire_Bit_Rate+0x6a>
     3ae:	e9 eb       	ldi	r30, 0xB9	; 185
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	8c 7f       	andi	r24, 0xFC	; 252
     3b6:	80 83       	st	Z, r24
     3b8:	c1 e0       	ldi	r28, 0x01	; 1
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	74 e2       	ldi	r23, 0x24	; 36
     3be:	84 ef       	ldi	r24, 0xF4	; 244
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	a9 01       	movw	r20, r18
     3c4:	98 01       	movw	r18, r16
     3c6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__udivmodsi4>
     3ca:	ca 01       	movw	r24, r20
     3cc:	b9 01       	movw	r22, r18
     3ce:	60 51       	subi	r22, 0x10	; 16
     3d0:	71 09       	sbc	r23, r1
     3d2:	81 09       	sbc	r24, r1
     3d4:	91 09       	sbc	r25, r1
     3d6:	4c 2f       	mov	r20, r28
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	9a 01       	movw	r18, r20
     3dc:	22 0f       	add	r18, r18
     3de:	33 1f       	adc	r19, r19
     3e0:	03 2e       	mov	r0, r19
     3e2:	00 0c       	add	r0, r0
     3e4:	44 0b       	sbc	r20, r20
     3e6:	55 0b       	sbc	r21, r21
     3e8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__udivmodsi4>
     3ec:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	08 95       	ret

000003f8 <Two_Wire_State>:

// Read the status register
uint8_t Two_Wire_State(void)
{
	uint8_t state;
	state = TWSR & 0xF8;
     3f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	return state;
}
     3fc:	88 7f       	andi	r24, 0xF8	; 248
     3fe:	08 95       	ret

00000400 <Two_Wire_Write>:

// Write a byte via Two Wire
uint8_t Two_Wire_Write(uint8_t data)
{
	// Load data to register
	TWDR = data;
     400:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	// Enable TWI and Interruption (send data to bus)
	TWCR = (1 << TWEN) | (1 << TWINT);
     404:	84 e8       	ldi	r24, 0x84	; 132
     406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait until interrupt flag is cleared
	while(!(TWCR & (1 << TWINT)));
     40a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     40e:	88 23       	and	r24, r24
     410:	e4 f7       	brge	.-8      	; 0x40a <Two_Wire_Write+0xa>
	// Return state
	return Two_Wire_State();
     412:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Two_Wire_State>
}
     416:	08 95       	ret

00000418 <Two_Wire_Start>:

// Send Start Condition
uint8_t Two_Wire_Start(void)
{
	// Enable Two Wire, send start condition, set flag (starts operation)
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     418:	84 ea       	ldi	r24, 0xA4	; 164
     41a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait until TWINT is cleared by hardware (stops an operation)
	while (!(TWCR & (1 << TWINT)));
     41e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     422:	88 23       	and	r24, r24
     424:	e4 f7       	brge	.-8      	; 0x41e <Two_Wire_Start+0x6>
	// Verify START condition received
	uint8_t state = Two_Wire_State();
     426:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Two_Wire_State>
	if (state == 0x08)
     42a:	88 30       	cpi	r24, 0x08	; 8
     42c:	09 f4       	brne	.+2      	; 0x430 <Two_Wire_Start+0x18>
	{
		// If the START is complete, return 1
		return 1;
     42e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		// If not, return the TWSR state
		return state;
	}
}
     430:	08 95       	ret

00000432 <Two_Wire_Stop>:

// Send Stop Condition
void Two_Wire_Stop(void)
{
	// Enable Two Wire, send stop condition, set flag
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     432:	84 e9       	ldi	r24, 0x94	; 148
     434:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait until stop is done
	while(TWCR & (1 << TWSTO));
     438:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     43c:	84 fd       	sbrc	r24, 4
     43e:	fc cf       	rjmp	.-8      	; 0x438 <Two_Wire_Stop+0x6>
}
     440:	08 95       	ret

00000442 <TWI_Read_Byte>:
	return Two_Wire_State();
}

// Read a byte via Two Wire
uint8_t TWI_Read_Byte(uint8_t ack) 
{
     442:	cf 93       	push	r28
	// Enable TWI, clear flag, and ACK/NACK bit
	TWCR = (1 << TWINT) | (1 << TWEN) | (ack ? (1 << TWEA) : 0);
     444:	88 23       	and	r24, r24
     446:	11 f0       	breq	.+4      	; 0x44c <TWI_Read_Byte+0xa>
     448:	84 ec       	ldi	r24, 0xC4	; 196
     44a:	01 c0       	rjmp	.+2      	; 0x44e <TWI_Read_Byte+0xc>
     44c:	84 e8       	ldi	r24, 0x84	; 132
     44e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait until operation is complete
	while(!(TWCR & (1 << TWINT)));
     452:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     456:	88 23       	and	r24, r24
     458:	e4 f7       	brge	.-8      	; 0x452 <TWI_Read_Byte+0x10>
	// Verify successful read and save into buffer
	uint8_t state = Two_Wire_State();
     45a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Two_Wire_State>
     45e:	c8 2f       	mov	r28, r24
	if (state == 0x50 || state == 0x58)
     460:	80 35       	cpi	r24, 0x50	; 80
     462:	11 f0       	breq	.+4      	; 0x468 <TWI_Read_Byte+0x26>
     464:	88 35       	cpi	r24, 0x58	; 88
     466:	19 f4       	brne	.+6      	; 0x46e <TWI_Read_Byte+0x2c>
	{
		// Returns data
		return TWDR;
     468:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     46c:	03 c0       	rjmp	.+6      	; 0x474 <TWI_Read_Byte+0x32>
	}
	else
	{
		// Stop communication
		Two_Wire_Stop();
     46e:	0e 94 19 02 	call	0x432	; 0x432 <Two_Wire_Stop>
		return state;
     472:	8c 2f       	mov	r24, r28
	}
}
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <TWI_Master_Transmitter>:

/********************************************************************/
/*---------------------------Mode functions-------------------------*/

void TWI_Master_Transmitter(uint8_t slave_Address)
{
     478:	cf 93       	push	r28
     47a:	c8 2f       	mov	r28, r24
	// Enable Two Wire and Interruption
	TWCR = (1 << TWEN) | (1 << TWIE);
     47c:	85 e0       	ldi	r24, 0x05	; 5
     47e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Send start condition
	uint8_t start = Two_Wire_Start();
     482:	0e 94 0c 02 	call	0x418	; 0x418 <Two_Wire_Start>
	// If START fails, stop communication
	if (start != 1) Two_Wire_Stop();
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	11 f0       	breq	.+4      	; 0x48e <TWI_Master_Transmitter+0x16>
     48a:	0e 94 19 02 	call	0x432	; 0x432 <Two_Wire_Stop>
	// Send SLA + W (Write = 0, Read = 1)
	Two_Wire_Write(slave_Address << 1 & 0b11111110);
     48e:	8c 2f       	mov	r24, r28
     490:	88 0f       	add	r24, r24
     492:	0e 94 00 02 	call	0x400	; 0x400 <Two_Wire_Write>
	// Verify SLA + W sent and ACK received
	uint8_t state = Two_Wire_State();
     496:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Two_Wire_State>
	// If SLA + W + ACK fails, stop communication
	if (state != 0x18) Two_Wire_Stop();
     49a:	88 31       	cpi	r24, 0x18	; 24
     49c:	11 f0       	breq	.+4      	; 0x4a2 <TWI_Master_Transmitter+0x2a>
     49e:	0e 94 19 02 	call	0x432	; 0x432 <Two_Wire_Stop>
	// Now send the useful data with write
}
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <TWI_Master_Receiver>:

void TWI_Master_Receiver(uint8_t slave_Address)
{
     4a6:	cf 93       	push	r28
     4a8:	c8 2f       	mov	r28, r24
	// Enable Two Wire and Interruption
	TWCR = (1 << TWEN) | (1 << TWIE);
     4aa:	85 e0       	ldi	r24, 0x05	; 5
     4ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Send start condition
	uint8_t start = Two_Wire_Start();
     4b0:	0e 94 0c 02 	call	0x418	; 0x418 <Two_Wire_Start>
	// If START fails, stop communication
	if (start != 1) Two_Wire_Stop();
     4b4:	81 30       	cpi	r24, 0x01	; 1
     4b6:	11 f0       	breq	.+4      	; 0x4bc <TWI_Master_Receiver+0x16>
     4b8:	0e 94 19 02 	call	0x432	; 0x432 <Two_Wire_Stop>
	// Send SLA + W (Write = 0, Read = 1)
	Two_Wire_Write((slave_Address << 1) | 0x01);
     4bc:	8c 2f       	mov	r24, r28
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	81 60       	ori	r24, 0x01	; 1
     4c6:	0e 94 00 02 	call	0x400	; 0x400 <Two_Wire_Write>
	// Verify SLA + W sent and ACK received
	uint8_t state = Two_Wire_State();
     4ca:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Two_Wire_State>
	// If SLA + W + ACK fails, stop communication
	if (state != 0x40) Two_Wire_Stop();
     4ce:	80 34       	cpi	r24, 0x40	; 64
     4d0:	11 f0       	breq	.+4      	; 0x4d6 <TWI_Master_Receiver+0x30>
     4d2:	0e 94 19 02 	call	0x432	; 0x432 <Two_Wire_Stop>
	// Now read the useful data with read
}
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <initUART>:
#include "UARTlib.h"

void initUART()
{
	// Define TX (PD0) as OUT
	DDRD |= (1 << DDD1);
     4da:	8a b1       	in	r24, 0x0a	; 10
     4dc:	82 60       	ori	r24, 0x02	; 2
     4de:	8a b9       	out	0x0a, r24	; 10
	// Define RX (PD1) as IN
	DDRD &= ~(1 << DDD0);
     4e0:	8a b1       	in	r24, 0x0a	; 10
     4e2:	8e 7f       	andi	r24, 0xFE	; 254
     4e4:	8a b9       	out	0x0a, r24	; 10
	// Configure UCSR0A
	UCSR0A = 0x00;
     4e6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	// Configure UCSR0B (enable receive interrupt, enable reception, enable transmission)
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     4ea:	88 e9       	ldi	r24, 0x98	; 152
     4ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Configure UCSR0C (asynchronous normal, no parity, 1 stop bit, 8 bit rate)
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     4f0:	86 e0       	ldi	r24, 0x06	; 6
     4f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	// Configure baud rate, UBRR0 = 103 --> 9600 @ 16MHz
	UBRR0 = 103;
     4f6:	87 e6       	ldi	r24, 0x67	; 103
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     4fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     502:	08 95       	ret

00000504 <writeChar>:
}

void writeChar(char caracter)
{
	while((UCSR0A & (1 << UDRE0)) == 0);
     504:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     508:	95 ff       	sbrs	r25, 5
     50a:	fc cf       	rjmp	.-8      	; 0x504 <writeChar>
	UDR0 = caracter; // Rewrite character until UDR0 is empty and ready to receive again
     50c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     510:	08 95       	ret

00000512 <writeString>:
}

void writeString(char* texto)
{
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	8c 01       	movw	r16, r24
	for (uint16_t i = 0; *(texto + i) != '\0'; i++) // until text is empty
     51c:	c0 e0       	ldi	r28, 0x00	; 0
     51e:	d0 e0       	ldi	r29, 0x00	; 0
     520:	03 c0       	rjmp	.+6      	; 0x528 <writeString+0x16>
	{
		writeChar(*(texto + i)); // text direction with pointer
     522:	0e 94 82 02 	call	0x504	; 0x504 <writeChar>
	UDR0 = caracter; // Rewrite character until UDR0 is empty and ready to receive again
}

void writeString(char* texto)
{
	for (uint16_t i = 0; *(texto + i) != '\0'; i++) // until text is empty
     526:	21 96       	adiw	r28, 0x01	; 1
     528:	f8 01       	movw	r30, r16
     52a:	ec 0f       	add	r30, r28
     52c:	fd 1f       	adc	r31, r29
     52e:	80 81       	ld	r24, Z
     530:	81 11       	cpse	r24, r1
     532:	f7 cf       	rjmp	.-18     	; 0x522 <writeString+0x10>
	{
		writeChar(*(texto + i)); // text direction with pointer
	}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
     53c:	08 95       	ret

0000053e <setup>:
/********************************************************************/
/*---------------------Non-interrupt Subroutines--------------------*/
void setup()
{
	// Disable global interruption
	cli();
     53e:	f8 94       	cli
	// Initialize I2C Master Mode f = 100kHz, PreScaler = 1
	init_TWI_pins();
     540:	0e 94 a1 01 	call	0x342	; 0x342 <init_TWI_pins>
	Two_Wire_Bit_Rate(100000,1);
     544:	41 e0       	ldi	r20, 0x01	; 1
     546:	60 ea       	ldi	r22, 0xA0	; 160
     548:	76 e8       	ldi	r23, 0x86	; 134
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 a8 01 	call	0x350	; 0x350 <Two_Wire_Bit_Rate>
	// Initialize UART (asynchronous normal, no parity, 1 stop bit, 8 bit rate, 9600@16MHz)
	initUART();
     552:	0e 94 6d 02 	call	0x4da	; 0x4da <initUART>
	// Enable global interruption
	sei();
     556:	78 94       	sei
     558:	08 95       	ret

0000055a <program>:
}

void program()
{
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	00 d0       	rcall	.+0      	; 0x568 <program+0xe>
     568:	00 d0       	rcall	.+0      	; 0x56a <program+0x10>
     56a:	00 d0       	rcall	.+0      	; 0x56c <program+0x12>
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     570:	2f ef       	ldi	r18, 0xFF	; 255
     572:	86 e7       	ldi	r24, 0x76	; 118
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	21 50       	subi	r18, 0x01	; 1
     578:	80 40       	sbci	r24, 0x00	; 0
     57a:	90 40       	sbci	r25, 0x00	; 0
     57c:	e1 f7       	brne	.-8      	; 0x576 <program+0x1c>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <program+0x26>
     580:	00 00       	nop
	
	/*-------------------------AHT10 slave read---------------------*/
	// Needs at least 20 ms after power on
	_delay_ms(30);
	// Initialization commands
	TWI_Master_Transmitter(slave_AHT10);
     582:	88 e3       	ldi	r24, 0x38	; 56
     584:	0e 94 3c 02 	call	0x478	; 0x478 <TWI_Master_Transmitter>
	Two_Wire_Write(0xE1);
     588:	81 ee       	ldi	r24, 0xE1	; 225
     58a:	0e 94 00 02 	call	0x400	; 0x400 <Two_Wire_Write>
	Two_Wire_Write(0x08);
     58e:	88 e0       	ldi	r24, 0x08	; 8
     590:	0e 94 00 02 	call	0x400	; 0x400 <Two_Wire_Write>
	Two_Wire_Write(0x00);
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 00 02 	call	0x400	; 0x400 <Two_Wire_Write>
	Two_Wire_Stop();
     59a:	0e 94 19 02 	call	0x432	; 0x432 <Two_Wire_Stop>
	// Trigger measurement
	TWI_Master_Transmitter(slave_AHT10);
     59e:	88 e3       	ldi	r24, 0x38	; 56
     5a0:	0e 94 3c 02 	call	0x478	; 0x478 <TWI_Master_Transmitter>
	Two_Wire_Write(0xAC);
     5a4:	8c ea       	ldi	r24, 0xAC	; 172
     5a6:	0e 94 00 02 	call	0x400	; 0x400 <Two_Wire_Write>
	Two_Wire_Write(0x33);
     5aa:	83 e3       	ldi	r24, 0x33	; 51
     5ac:	0e 94 00 02 	call	0x400	; 0x400 <Two_Wire_Write>
	Two_Wire_Write(0x00);
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	0e 94 00 02 	call	0x400	; 0x400 <Two_Wire_Write>
	Two_Wire_Stop();
     5b6:	0e 94 19 02 	call	0x432	; 0x432 <Two_Wire_Stop>
     5ba:	2f ef       	ldi	r18, 0xFF	; 255
     5bc:	87 ee       	ldi	r24, 0xE7	; 231
     5be:	93 e0       	ldi	r25, 0x03	; 3
     5c0:	21 50       	subi	r18, 0x01	; 1
     5c2:	80 40       	sbci	r24, 0x00	; 0
     5c4:	90 40       	sbci	r25, 0x00	; 0
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <program+0x66>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <program+0x70>
     5ca:	00 00       	nop
	// Needs at least 75 ms after trigger
	_delay_ms(80);
	// Read the data
	TWI_Master_Receiver(slave_AHT10);
     5cc:	88 e3       	ldi	r24, 0x38	; 56
     5ce:	0e 94 53 02 	call	0x4a6	; 0x4a6 <TWI_Master_Receiver>
	// Read all the values
	uint8_t rawDataAHT10[6];
	for (uint8_t i = 0; i < 6; i++)
     5d2:	10 e0       	ldi	r17, 0x00	; 0
     5d4:	1c c0       	rjmp	.+56     	; 0x60e <program+0xb4>
	{
		if (i < 5)
     5d6:	15 30       	cpi	r17, 0x05	; 5
     5d8:	68 f4       	brcc	.+26     	; 0x5f4 <program+0x9a>
		// Bytes 0 to 5
		rawDataAHT10[i] = TWI_Read_Byte(1);
     5da:	e1 2e       	mov	r14, r17
     5dc:	f1 2c       	mov	r15, r1
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 21 02 	call	0x442	; 0x442 <TWI_Read_Byte>
     5e4:	e1 e0       	ldi	r30, 0x01	; 1
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	ec 0f       	add	r30, r28
     5ea:	fd 1f       	adc	r31, r29
     5ec:	ee 0d       	add	r30, r14
     5ee:	ff 1d       	adc	r31, r15
     5f0:	80 83       	st	Z, r24
     5f2:	0c c0       	rjmp	.+24     	; 0x60c <program+0xb2>
		else
		// Last byte 6
		rawDataAHT10[i] = TWI_Read_Byte(0);
     5f4:	e1 2e       	mov	r14, r17
     5f6:	f1 2c       	mov	r15, r1
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	0e 94 21 02 	call	0x442	; 0x442 <TWI_Read_Byte>
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	ee 0d       	add	r30, r14
     608:	ff 1d       	adc	r31, r15
     60a:	80 83       	st	Z, r24
	_delay_ms(80);
	// Read the data
	TWI_Master_Receiver(slave_AHT10);
	// Read all the values
	uint8_t rawDataAHT10[6];
	for (uint8_t i = 0; i < 6; i++)
     60c:	1f 5f       	subi	r17, 0xFF	; 255
     60e:	16 30       	cpi	r17, 0x06	; 6
     610:	10 f3       	brcs	.-60     	; 0x5d6 <program+0x7c>
		rawDataAHT10[i] = TWI_Read_Byte(1);
		else
		// Last byte 6
		rawDataAHT10[i] = TWI_Read_Byte(0);
	}
	Two_Wire_Stop();
     612:	0e 94 19 02 	call	0x432	; 0x432 <Two_Wire_Stop>
	
	/*-------------------------AHT10 data conversion---------------------*/
	// Mask 4 less significant bits of byte 3, byte 4, byte 5
	uint32_t rawTemp = (((uint32_t)rawDataAHT10[3] & 0x0F) << 16) | ((uint32_t)rawDataAHT10[4] << 8) | ((uint32_t)rawDataAHT10[5]);
     616:	1c 81       	ldd	r17, Y+4	; 0x04
     618:	61 2f       	mov	r22, r17
     61a:	6f 70       	andi	r22, 0x0F	; 15
     61c:	86 2f       	mov	r24, r22
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	bc 01       	movw	r22, r24
     626:	55 27       	eor	r21, r21
     628:	44 27       	eor	r20, r20
     62a:	8d 81       	ldd	r24, Y+5	; 0x05
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	a0 e0       	ldi	r26, 0x00	; 0
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	ba 2f       	mov	r27, r26
     634:	a9 2f       	mov	r26, r25
     636:	98 2f       	mov	r25, r24
     638:	88 27       	eor	r24, r24
     63a:	84 2b       	or	r24, r20
     63c:	95 2b       	or	r25, r21
     63e:	a6 2b       	or	r26, r22
     640:	b7 2b       	or	r27, r23
     642:	2e 81       	ldd	r18, Y+6	; 0x06
     644:	bc 01       	movw	r22, r24
     646:	cd 01       	movw	r24, r26
     648:	62 2b       	or	r22, r18
	// Use the corresponding formula
	tempAHT10 = ((rawTemp * 200.0) / 1048576.0) - 50.0;
     64a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__floatunsisf>
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	48 e4       	ldi	r20, 0x48	; 72
     654:	53 e4       	ldi	r21, 0x43	; 67
     656:	0e 94 75 05 	call	0xaea	; 0xaea <__mulsf3>
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e8       	ldi	r20, 0x80	; 128
     660:	55 e3       	ldi	r21, 0x35	; 53
     662:	0e 94 75 05 	call	0xaea	; 0xaea <__mulsf3>
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	48 e4       	ldi	r20, 0x48	; 72
     66c:	52 e4       	ldi	r21, 0x42	; 66
     66e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__subsf3>
     672:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <tempAHT10>
     676:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <tempAHT10+0x1>
     67a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <tempAHT10+0x2>
     67e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <tempAHT10+0x3>
	// Mask the 20 humidity raw bits
	uint32_t rawHum = ((uint32_t)rawDataAHT10[1] << 12) | ((uint32_t)rawDataAHT10[2] << 4)  | ((uint32_t)rawDataAHT10[3] >> 4);
     682:	6a 81       	ldd	r22, Y+2	; 0x02
     684:	86 2f       	mov	r24, r22
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	a0 e0       	ldi	r26, 0x00	; 0
     68a:	b0 e0       	ldi	r27, 0x00	; 0
     68c:	ac 01       	movw	r20, r24
     68e:	bd 01       	movw	r22, r26
     690:	03 2e       	mov	r0, r19
     692:	3c e0       	ldi	r19, 0x0C	; 12
     694:	44 0f       	add	r20, r20
     696:	55 1f       	adc	r21, r21
     698:	66 1f       	adc	r22, r22
     69a:	77 1f       	adc	r23, r23
     69c:	3a 95       	dec	r19
     69e:	d1 f7       	brne	.-12     	; 0x694 <program+0x13a>
     6a0:	30 2d       	mov	r19, r0
     6a2:	8b 81       	ldd	r24, Y+3	; 0x03
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	a0 e0       	ldi	r26, 0x00	; 0
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	88 0f       	add	r24, r24
     6ac:	99 1f       	adc	r25, r25
     6ae:	aa 1f       	adc	r26, r26
     6b0:	bb 1f       	adc	r27, r27
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	aa 1f       	adc	r26, r26
     6b8:	bb 1f       	adc	r27, r27
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	aa 1f       	adc	r26, r26
     6c0:	bb 1f       	adc	r27, r27
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	aa 1f       	adc	r26, r26
     6c8:	bb 1f       	adc	r27, r27
     6ca:	84 2b       	or	r24, r20
     6cc:	95 2b       	or	r25, r21
     6ce:	a6 2b       	or	r26, r22
     6d0:	b7 2b       	or	r27, r23
     6d2:	12 95       	swap	r17
     6d4:	1f 70       	andi	r17, 0x0F	; 15
     6d6:	bc 01       	movw	r22, r24
     6d8:	cd 01       	movw	r24, r26
     6da:	61 2b       	or	r22, r17
	// Convert to relative humidity using formula
	humAHT10 = (rawHum * 100.0) / 1048576.0;
     6dc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__floatunsisf>
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	48 ec       	ldi	r20, 0xC8	; 200
     6e6:	52 e4       	ldi	r21, 0x42	; 66
     6e8:	0e 94 75 05 	call	0xaea	; 0xaea <__mulsf3>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e8       	ldi	r20, 0x80	; 128
     6f2:	55 e3       	ldi	r21, 0x35	; 53
     6f4:	0e 94 75 05 	call	0xaea	; 0xaea <__mulsf3>
     6f8:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <humAHT10>
     6fc:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <humAHT10+0x1>
     700:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <humAHT10+0x2>
     704:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <humAHT10+0x3>
	/*-------------------------Centrifuge slave communication---------------------*/
	
	
	/*-------------------------Sensors slave communication---------------------*/
	// Ask MQ-135 value (command = 1)
	TWI_Master_Transmitter(slave_Sensor);
     708:	80 e4       	ldi	r24, 0x40	; 64
     70a:	0e 94 3c 02 	call	0x478	; 0x478 <TWI_Master_Transmitter>
	Two_Wire_Write(1);
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0e 94 00 02 	call	0x400	; 0x400 <Two_Wire_Write>
	Two_Wire_Stop();
     714:	0e 94 19 02 	call	0x432	; 0x432 <Two_Wire_Stop>
	// Save
	TWI_Master_Receiver(slave_Sensor);
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <TWI_Master_Receiver>
	smoke_MQ135 = TWI_Read_Byte(0);
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 21 02 	call	0x442	; 0x442 <TWI_Read_Byte>
     724:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	Two_Wire_Stop();
     728:	0e 94 19 02 	call	0x432	; 0x432 <Two_Wire_Stop>
	
	// Ask percent rain sensor (command = 2)
	TWI_Master_Transmitter(slave_Sensor);
     72c:	80 e4       	ldi	r24, 0x40	; 64
     72e:	0e 94 3c 02 	call	0x478	; 0x478 <TWI_Master_Transmitter>
	Two_Wire_Write(2);
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	0e 94 00 02 	call	0x400	; 0x400 <Two_Wire_Write>
	Two_Wire_Stop();
     738:	0e 94 19 02 	call	0x432	; 0x432 <Two_Wire_Stop>
	// Save
	TWI_Master_Receiver(slave_Sensor);
     73c:	80 e4       	ldi	r24, 0x40	; 64
     73e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <TWI_Master_Receiver>
	rain_Sensor = TWI_Read_Byte(0);
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	0e 94 21 02 	call	0x442	; 0x442 <TWI_Read_Byte>
     748:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <rain_Sensor>
	Two_Wire_Stop();
     74c:	0e 94 19 02 	call	0x432	; 0x432 <Two_Wire_Stop>
	
	/*---------------------Show the data in LCD--------------------*/
	// Show smoke values in LCD
	LCD_Set_Cursor(1, 2);
     750:	62 e0       	ldi	r22, 0x02	; 2
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Set_Cursor>
	LCD_Write_String("   ");
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Write_String>
	LCD_Set_Cursor(1, 2);
     760:	62 e0       	ldi	r22, 0x02	; 2
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Set_Cursor>
	itoa(smoke_MQ135, str, 10);
     768:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     76c:	4a e0       	ldi	r20, 0x0A	; 10
     76e:	66 e2       	ldi	r22, 0x26	; 38
     770:	71 e0       	ldi	r23, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 24 06 	call	0xc48	; 0xc48 <__itoa_ncheck>
	LCD_Write_String(str);
     778:	86 e2       	ldi	r24, 0x26	; 38
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Write_String>
	
	// Show rain values in LCD
	LCD_Set_Cursor(4, 2);
     780:	62 e0       	ldi	r22, 0x02	; 2
     782:	84 e0       	ldi	r24, 0x04	; 4
     784:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Set_Cursor>
	LCD_Write_String("   ");
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Write_String>
	LCD_Set_Cursor(4, 2);
     790:	62 e0       	ldi	r22, 0x02	; 2
     792:	84 e0       	ldi	r24, 0x04	; 4
     794:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Set_Cursor>
	itoa(rain_Sensor, str, 10);
     798:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <rain_Sensor>
     79c:	4a e0       	ldi	r20, 0x0A	; 10
     79e:	66 e2       	ldi	r22, 0x26	; 38
     7a0:	71 e0       	ldi	r23, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 24 06 	call	0xc48	; 0xc48 <__itoa_ncheck>
	LCD_Write_String(str);
     7a8:	86 e2       	ldi	r24, 0x26	; 38
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Write_String>
	LCD_Write_String("%");
     7b0:	80 e1       	ldi	r24, 0x10	; 16
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Write_String>
	
	// Show AHT10 temperature value in LCD
	dtostrf(tempAHT10, 5, 2, str); // dtostrf(float to convert, space needed, number of decimals, string to save)
     7b8:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <tempAHT10>
     7bc:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <tempAHT10+0x1>
     7c0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <tempAHT10+0x2>
     7c4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <tempAHT10+0x3>
     7c8:	06 e2       	ldi	r16, 0x26	; 38
     7ca:	11 e0       	ldi	r17, 0x01	; 1
     7cc:	22 e0       	ldi	r18, 0x02	; 2
     7ce:	45 e0       	ldi	r20, 0x05	; 5
     7d0:	0e 94 04 06 	call	0xc08	; 0xc08 <dtostrf>
	LCD_Set_Cursor(9, 2);
     7d4:	62 e0       	ldi	r22, 0x02	; 2
     7d6:	89 e0       	ldi	r24, 0x09	; 9
     7d8:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Set_Cursor>
	LCD_Write_String("     C");
     7dc:	84 e0       	ldi	r24, 0x04	; 4
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Write_String>
	LCD_Set_Cursor(9, 2);
     7e4:	62 e0       	ldi	r22, 0x02	; 2
     7e6:	89 e0       	ldi	r24, 0x09	; 9
     7e8:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Set_Cursor>
	LCD_Write_String(str);
     7ec:	c8 01       	movw	r24, r16
     7ee:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Write_String>
	
	// Show AHT10 humidity value in LCD
	dtostrf(humAHT10, 5, 2, str); // dtostrf(float to convert, space needed, number of decimals, string to save)
     7f2:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <humAHT10>
     7f6:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <humAHT10+0x1>
     7fa:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <humAHT10+0x2>
     7fe:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <humAHT10+0x3>
     802:	22 e0       	ldi	r18, 0x02	; 2
     804:	45 e0       	ldi	r20, 0x05	; 5
     806:	0e 94 04 06 	call	0xc08	; 0xc08 <dtostrf>
	LCD_Set_Cursor(7, 1);
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	87 e0       	ldi	r24, 0x07	; 7
     80e:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Set_Cursor>
	LCD_Write_String("     %");
     812:	8b e0       	ldi	r24, 0x0B	; 11
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Write_String>
	LCD_Set_Cursor(7, 1);
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	87 e0       	ldi	r24, 0x07	; 7
     81e:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Set_Cursor>
	LCD_Write_String(str);
     822:	c8 01       	movw	r24, r16
     824:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Write_String>
	// Send string to UART bus
	writeString(str);
	writeChar(',');*/
	
	// Convert temperature to array
	dtostrf(tempAHT10, 5, 2, str);
     828:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <tempAHT10>
     82c:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <tempAHT10+0x1>
     830:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <tempAHT10+0x2>
     834:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <tempAHT10+0x3>
     838:	22 e0       	ldi	r18, 0x02	; 2
     83a:	45 e0       	ldi	r20, 0x05	; 5
     83c:	0e 94 04 06 	call	0xc08	; 0xc08 <dtostrf>
	// Send string to UART bus
	writeString(str);
     840:	c8 01       	movw	r24, r16
     842:	0e 94 89 02 	call	0x512	; 0x512 <writeString>
	writeChar(',');
     846:	8c e2       	ldi	r24, 0x2C	; 44
     848:	0e 94 82 02 	call	0x504	; 0x504 <writeChar>
	
	// Convert humidity to array
	dtostrf(humAHT10, 5, 2, str);
     84c:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <humAHT10>
     850:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <humAHT10+0x1>
     854:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <humAHT10+0x2>
     858:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <humAHT10+0x3>
     85c:	22 e0       	ldi	r18, 0x02	; 2
     85e:	45 e0       	ldi	r20, 0x05	; 5
     860:	0e 94 04 06 	call	0xc08	; 0xc08 <dtostrf>
	// Send string to UART bus
	writeString(str);
     864:	c8 01       	movw	r24, r16
     866:	0e 94 89 02 	call	0x512	; 0x512 <writeString>
	writeChar(',');
     86a:	8c e2       	ldi	r24, 0x2C	; 44
     86c:	0e 94 82 02 	call	0x504	; 0x504 <writeChar>
	
	itoa(smoke_MQ135, str, 10);
     870:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     874:	4a e0       	ldi	r20, 0x0A	; 10
     876:	b8 01       	movw	r22, r16
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 24 06 	call	0xc48	; 0xc48 <__itoa_ncheck>
	writeString(str);
     87e:	c8 01       	movw	r24, r16
     880:	0e 94 89 02 	call	0x512	; 0x512 <writeString>
	writeChar(',');
     884:	8c e2       	ldi	r24, 0x2C	; 44
     886:	0e 94 82 02 	call	0x504	; 0x504 <writeChar>
	
	itoa(rain_Sensor, str, 10);
     88a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <rain_Sensor>
     88e:	4a e0       	ldi	r20, 0x0A	; 10
     890:	b8 01       	movw	r22, r16
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 24 06 	call	0xc48	; 0xc48 <__itoa_ncheck>
	writeString(str);
     898:	c8 01       	movw	r24, r16
     89a:	0e 94 89 02 	call	0x512	; 0x512 <writeString>
	writeChar(',');
     89e:	8c e2       	ldi	r24, 0x2C	; 44
     8a0:	0e 94 82 02 	call	0x504	; 0x504 <writeChar>
	
	// End "flag"
	writeChar('\n');
     8a4:	8a e0       	ldi	r24, 0x0A	; 10
     8a6:	0e 94 82 02 	call	0x504	; 0x504 <writeChar>
     8aa:	2f ef       	ldi	r18, 0xFF	; 255
     8ac:	83 ed       	ldi	r24, 0xD3	; 211
     8ae:	90 e3       	ldi	r25, 0x30	; 48
     8b0:	21 50       	subi	r18, 0x01	; 1
     8b2:	80 40       	sbci	r24, 0x00	; 0
     8b4:	90 40       	sbci	r25, 0x00	; 0
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
     8ba:	00 00       	nop
	// Anti saturation delay
	_delay_ms(1000);
}
     8bc:	26 96       	adiw	r28, 0x06	; 6
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	08 95       	ret

000008d6 <main>:
/********************************************************************/
/*------------------------------Main--------------------------------*/
int main(void)
{
	// Global config of MCU
	setup();
     8d6:	0e 94 9f 02 	call	0x53e	; 0x53e <setup>
	// Initialize LCD 4 bit mode and write index
	initLCD_4_bits();
     8da:	0e 94 07 01 	call	0x20e	; 0x20e <initLCD_4_bits>
	LCD_Set_Cursor(1, 1);
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Set_Cursor>
	LCD_Write_String("Jijo");
     8e6:	82 e1       	ldi	r24, 0x12	; 18
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Write_String>
	// Main loop
	while (1)
	{
		program();
     8ee:	0e 94 ad 02 	call	0x55a	; 0x55a <program>
     8f2:	fd cf       	rjmp	.-6      	; 0x8ee <main+0x18>

000008f4 <__subsf3>:
     8f4:	50 58       	subi	r21, 0x80	; 128

000008f6 <__addsf3>:
     8f6:	bb 27       	eor	r27, r27
     8f8:	aa 27       	eor	r26, r26
     8fa:	0e 94 92 04 	call	0x924	; 0x924 <__addsf3x>
     8fe:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_round>
     902:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_pscA>
     906:	38 f0       	brcs	.+14     	; 0x916 <__stack+0x17>
     908:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_pscB>
     90c:	20 f0       	brcs	.+8      	; 0x916 <__stack+0x17>
     90e:	39 f4       	brne	.+14     	; 0x91e <__stack+0x1f>
     910:	9f 3f       	cpi	r25, 0xFF	; 255
     912:	19 f4       	brne	.+6      	; 0x91a <__stack+0x1b>
     914:	26 f4       	brtc	.+8      	; 0x91e <__stack+0x1f>
     916:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_nan>
     91a:	0e f4       	brtc	.+2      	; 0x91e <__stack+0x1f>
     91c:	e0 95       	com	r30
     91e:	e7 fb       	bst	r30, 7
     920:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_inf>

00000924 <__addsf3x>:
     924:	e9 2f       	mov	r30, r25
     926:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_split3>
     92a:	58 f3       	brcs	.-42     	; 0x902 <__stack+0x3>
     92c:	ba 17       	cp	r27, r26
     92e:	62 07       	cpc	r22, r18
     930:	73 07       	cpc	r23, r19
     932:	84 07       	cpc	r24, r20
     934:	95 07       	cpc	r25, r21
     936:	20 f0       	brcs	.+8      	; 0x940 <__addsf3x+0x1c>
     938:	79 f4       	brne	.+30     	; 0x958 <__addsf3x+0x34>
     93a:	a6 f5       	brtc	.+104    	; 0x9a4 <__addsf3x+0x80>
     93c:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_zero>
     940:	0e f4       	brtc	.+2      	; 0x944 <__addsf3x+0x20>
     942:	e0 95       	com	r30
     944:	0b 2e       	mov	r0, r27
     946:	ba 2f       	mov	r27, r26
     948:	a0 2d       	mov	r26, r0
     94a:	0b 01       	movw	r0, r22
     94c:	b9 01       	movw	r22, r18
     94e:	90 01       	movw	r18, r0
     950:	0c 01       	movw	r0, r24
     952:	ca 01       	movw	r24, r20
     954:	a0 01       	movw	r20, r0
     956:	11 24       	eor	r1, r1
     958:	ff 27       	eor	r31, r31
     95a:	59 1b       	sub	r21, r25
     95c:	99 f0       	breq	.+38     	; 0x984 <__addsf3x+0x60>
     95e:	59 3f       	cpi	r21, 0xF9	; 249
     960:	50 f4       	brcc	.+20     	; 0x976 <__addsf3x+0x52>
     962:	50 3e       	cpi	r21, 0xE0	; 224
     964:	68 f1       	brcs	.+90     	; 0x9c0 <__addsf3x+0x9c>
     966:	1a 16       	cp	r1, r26
     968:	f0 40       	sbci	r31, 0x00	; 0
     96a:	a2 2f       	mov	r26, r18
     96c:	23 2f       	mov	r18, r19
     96e:	34 2f       	mov	r19, r20
     970:	44 27       	eor	r20, r20
     972:	58 5f       	subi	r21, 0xF8	; 248
     974:	f3 cf       	rjmp	.-26     	; 0x95c <__addsf3x+0x38>
     976:	46 95       	lsr	r20
     978:	37 95       	ror	r19
     97a:	27 95       	ror	r18
     97c:	a7 95       	ror	r26
     97e:	f0 40       	sbci	r31, 0x00	; 0
     980:	53 95       	inc	r21
     982:	c9 f7       	brne	.-14     	; 0x976 <__addsf3x+0x52>
     984:	7e f4       	brtc	.+30     	; 0x9a4 <__addsf3x+0x80>
     986:	1f 16       	cp	r1, r31
     988:	ba 0b       	sbc	r27, r26
     98a:	62 0b       	sbc	r22, r18
     98c:	73 0b       	sbc	r23, r19
     98e:	84 0b       	sbc	r24, r20
     990:	ba f0       	brmi	.+46     	; 0x9c0 <__addsf3x+0x9c>
     992:	91 50       	subi	r25, 0x01	; 1
     994:	a1 f0       	breq	.+40     	; 0x9be <__addsf3x+0x9a>
     996:	ff 0f       	add	r31, r31
     998:	bb 1f       	adc	r27, r27
     99a:	66 1f       	adc	r22, r22
     99c:	77 1f       	adc	r23, r23
     99e:	88 1f       	adc	r24, r24
     9a0:	c2 f7       	brpl	.-16     	; 0x992 <__addsf3x+0x6e>
     9a2:	0e c0       	rjmp	.+28     	; 0x9c0 <__addsf3x+0x9c>
     9a4:	ba 0f       	add	r27, r26
     9a6:	62 1f       	adc	r22, r18
     9a8:	73 1f       	adc	r23, r19
     9aa:	84 1f       	adc	r24, r20
     9ac:	48 f4       	brcc	.+18     	; 0x9c0 <__addsf3x+0x9c>
     9ae:	87 95       	ror	r24
     9b0:	77 95       	ror	r23
     9b2:	67 95       	ror	r22
     9b4:	b7 95       	ror	r27
     9b6:	f7 95       	ror	r31
     9b8:	9e 3f       	cpi	r25, 0xFE	; 254
     9ba:	08 f0       	brcs	.+2      	; 0x9be <__addsf3x+0x9a>
     9bc:	b0 cf       	rjmp	.-160    	; 0x91e <__stack+0x1f>
     9be:	93 95       	inc	r25
     9c0:	88 0f       	add	r24, r24
     9c2:	08 f0       	brcs	.+2      	; 0x9c6 <__addsf3x+0xa2>
     9c4:	99 27       	eor	r25, r25
     9c6:	ee 0f       	add	r30, r30
     9c8:	97 95       	ror	r25
     9ca:	87 95       	ror	r24
     9cc:	08 95       	ret

000009ce <__floatunsisf>:
     9ce:	e8 94       	clt
     9d0:	09 c0       	rjmp	.+18     	; 0x9e4 <__floatsisf+0x12>

000009d2 <__floatsisf>:
     9d2:	97 fb       	bst	r25, 7
     9d4:	3e f4       	brtc	.+14     	; 0x9e4 <__floatsisf+0x12>
     9d6:	90 95       	com	r25
     9d8:	80 95       	com	r24
     9da:	70 95       	com	r23
     9dc:	61 95       	neg	r22
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	8f 4f       	sbci	r24, 0xFF	; 255
     9e2:	9f 4f       	sbci	r25, 0xFF	; 255
     9e4:	99 23       	and	r25, r25
     9e6:	a9 f0       	breq	.+42     	; 0xa12 <__floatsisf+0x40>
     9e8:	f9 2f       	mov	r31, r25
     9ea:	96 e9       	ldi	r25, 0x96	; 150
     9ec:	bb 27       	eor	r27, r27
     9ee:	93 95       	inc	r25
     9f0:	f6 95       	lsr	r31
     9f2:	87 95       	ror	r24
     9f4:	77 95       	ror	r23
     9f6:	67 95       	ror	r22
     9f8:	b7 95       	ror	r27
     9fa:	f1 11       	cpse	r31, r1
     9fc:	f8 cf       	rjmp	.-16     	; 0x9ee <__floatsisf+0x1c>
     9fe:	fa f4       	brpl	.+62     	; 0xa3e <__floatsisf+0x6c>
     a00:	bb 0f       	add	r27, r27
     a02:	11 f4       	brne	.+4      	; 0xa08 <__floatsisf+0x36>
     a04:	60 ff       	sbrs	r22, 0
     a06:	1b c0       	rjmp	.+54     	; 0xa3e <__floatsisf+0x6c>
     a08:	6f 5f       	subi	r22, 0xFF	; 255
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255
     a0c:	8f 4f       	sbci	r24, 0xFF	; 255
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	16 c0       	rjmp	.+44     	; 0xa3e <__floatsisf+0x6c>
     a12:	88 23       	and	r24, r24
     a14:	11 f0       	breq	.+4      	; 0xa1a <__floatsisf+0x48>
     a16:	96 e9       	ldi	r25, 0x96	; 150
     a18:	11 c0       	rjmp	.+34     	; 0xa3c <__floatsisf+0x6a>
     a1a:	77 23       	and	r23, r23
     a1c:	21 f0       	breq	.+8      	; 0xa26 <__floatsisf+0x54>
     a1e:	9e e8       	ldi	r25, 0x8E	; 142
     a20:	87 2f       	mov	r24, r23
     a22:	76 2f       	mov	r23, r22
     a24:	05 c0       	rjmp	.+10     	; 0xa30 <__floatsisf+0x5e>
     a26:	66 23       	and	r22, r22
     a28:	71 f0       	breq	.+28     	; 0xa46 <__floatsisf+0x74>
     a2a:	96 e8       	ldi	r25, 0x86	; 134
     a2c:	86 2f       	mov	r24, r22
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	2a f0       	brmi	.+10     	; 0xa3e <__floatsisf+0x6c>
     a34:	9a 95       	dec	r25
     a36:	66 0f       	add	r22, r22
     a38:	77 1f       	adc	r23, r23
     a3a:	88 1f       	adc	r24, r24
     a3c:	da f7       	brpl	.-10     	; 0xa34 <__floatsisf+0x62>
     a3e:	88 0f       	add	r24, r24
     a40:	96 95       	lsr	r25
     a42:	87 95       	ror	r24
     a44:	97 f9       	bld	r25, 7
     a46:	08 95       	ret

00000a48 <__fp_inf>:
     a48:	97 f9       	bld	r25, 7
     a4a:	9f 67       	ori	r25, 0x7F	; 127
     a4c:	80 e8       	ldi	r24, 0x80	; 128
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	08 95       	ret

00000a54 <__fp_nan>:
     a54:	9f ef       	ldi	r25, 0xFF	; 255
     a56:	80 ec       	ldi	r24, 0xC0	; 192
     a58:	08 95       	ret

00000a5a <__fp_pscA>:
     a5a:	00 24       	eor	r0, r0
     a5c:	0a 94       	dec	r0
     a5e:	16 16       	cp	r1, r22
     a60:	17 06       	cpc	r1, r23
     a62:	18 06       	cpc	r1, r24
     a64:	09 06       	cpc	r0, r25
     a66:	08 95       	ret

00000a68 <__fp_pscB>:
     a68:	00 24       	eor	r0, r0
     a6a:	0a 94       	dec	r0
     a6c:	12 16       	cp	r1, r18
     a6e:	13 06       	cpc	r1, r19
     a70:	14 06       	cpc	r1, r20
     a72:	05 06       	cpc	r0, r21
     a74:	08 95       	ret

00000a76 <__fp_round>:
     a76:	09 2e       	mov	r0, r25
     a78:	03 94       	inc	r0
     a7a:	00 0c       	add	r0, r0
     a7c:	11 f4       	brne	.+4      	; 0xa82 <__fp_round+0xc>
     a7e:	88 23       	and	r24, r24
     a80:	52 f0       	brmi	.+20     	; 0xa96 <__fp_round+0x20>
     a82:	bb 0f       	add	r27, r27
     a84:	40 f4       	brcc	.+16     	; 0xa96 <__fp_round+0x20>
     a86:	bf 2b       	or	r27, r31
     a88:	11 f4       	brne	.+4      	; 0xa8e <__fp_round+0x18>
     a8a:	60 ff       	sbrs	r22, 0
     a8c:	04 c0       	rjmp	.+8      	; 0xa96 <__fp_round+0x20>
     a8e:	6f 5f       	subi	r22, 0xFF	; 255
     a90:	7f 4f       	sbci	r23, 0xFF	; 255
     a92:	8f 4f       	sbci	r24, 0xFF	; 255
     a94:	9f 4f       	sbci	r25, 0xFF	; 255
     a96:	08 95       	ret

00000a98 <__fp_split3>:
     a98:	57 fd       	sbrc	r21, 7
     a9a:	90 58       	subi	r25, 0x80	; 128
     a9c:	44 0f       	add	r20, r20
     a9e:	55 1f       	adc	r21, r21
     aa0:	59 f0       	breq	.+22     	; 0xab8 <__fp_splitA+0x10>
     aa2:	5f 3f       	cpi	r21, 0xFF	; 255
     aa4:	71 f0       	breq	.+28     	; 0xac2 <__fp_splitA+0x1a>
     aa6:	47 95       	ror	r20

00000aa8 <__fp_splitA>:
     aa8:	88 0f       	add	r24, r24
     aaa:	97 fb       	bst	r25, 7
     aac:	99 1f       	adc	r25, r25
     aae:	61 f0       	breq	.+24     	; 0xac8 <__fp_splitA+0x20>
     ab0:	9f 3f       	cpi	r25, 0xFF	; 255
     ab2:	79 f0       	breq	.+30     	; 0xad2 <__fp_splitA+0x2a>
     ab4:	87 95       	ror	r24
     ab6:	08 95       	ret
     ab8:	12 16       	cp	r1, r18
     aba:	13 06       	cpc	r1, r19
     abc:	14 06       	cpc	r1, r20
     abe:	55 1f       	adc	r21, r21
     ac0:	f2 cf       	rjmp	.-28     	; 0xaa6 <__fp_split3+0xe>
     ac2:	46 95       	lsr	r20
     ac4:	f1 df       	rcall	.-30     	; 0xaa8 <__fp_splitA>
     ac6:	08 c0       	rjmp	.+16     	; 0xad8 <__fp_splitA+0x30>
     ac8:	16 16       	cp	r1, r22
     aca:	17 06       	cpc	r1, r23
     acc:	18 06       	cpc	r1, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	f1 cf       	rjmp	.-30     	; 0xab4 <__fp_splitA+0xc>
     ad2:	86 95       	lsr	r24
     ad4:	71 05       	cpc	r23, r1
     ad6:	61 05       	cpc	r22, r1
     ad8:	08 94       	sec
     ada:	08 95       	ret

00000adc <__fp_zero>:
     adc:	e8 94       	clt

00000ade <__fp_szero>:
     ade:	bb 27       	eor	r27, r27
     ae0:	66 27       	eor	r22, r22
     ae2:	77 27       	eor	r23, r23
     ae4:	cb 01       	movw	r24, r22
     ae6:	97 f9       	bld	r25, 7
     ae8:	08 95       	ret

00000aea <__mulsf3>:
     aea:	0e 94 88 05 	call	0xb10	; 0xb10 <__mulsf3x>
     aee:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_round>
     af2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_pscA>
     af6:	38 f0       	brcs	.+14     	; 0xb06 <__mulsf3+0x1c>
     af8:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_pscB>
     afc:	20 f0       	brcs	.+8      	; 0xb06 <__mulsf3+0x1c>
     afe:	95 23       	and	r25, r21
     b00:	11 f0       	breq	.+4      	; 0xb06 <__mulsf3+0x1c>
     b02:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_inf>
     b06:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_nan>
     b0a:	11 24       	eor	r1, r1
     b0c:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_szero>

00000b10 <__mulsf3x>:
     b10:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_split3>
     b14:	70 f3       	brcs	.-36     	; 0xaf2 <__mulsf3+0x8>

00000b16 <__mulsf3_pse>:
     b16:	95 9f       	mul	r25, r21
     b18:	c1 f3       	breq	.-16     	; 0xb0a <__mulsf3+0x20>
     b1a:	95 0f       	add	r25, r21
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	55 1f       	adc	r21, r21
     b20:	62 9f       	mul	r22, r18
     b22:	f0 01       	movw	r30, r0
     b24:	72 9f       	mul	r23, r18
     b26:	bb 27       	eor	r27, r27
     b28:	f0 0d       	add	r31, r0
     b2a:	b1 1d       	adc	r27, r1
     b2c:	63 9f       	mul	r22, r19
     b2e:	aa 27       	eor	r26, r26
     b30:	f0 0d       	add	r31, r0
     b32:	b1 1d       	adc	r27, r1
     b34:	aa 1f       	adc	r26, r26
     b36:	64 9f       	mul	r22, r20
     b38:	66 27       	eor	r22, r22
     b3a:	b0 0d       	add	r27, r0
     b3c:	a1 1d       	adc	r26, r1
     b3e:	66 1f       	adc	r22, r22
     b40:	82 9f       	mul	r24, r18
     b42:	22 27       	eor	r18, r18
     b44:	b0 0d       	add	r27, r0
     b46:	a1 1d       	adc	r26, r1
     b48:	62 1f       	adc	r22, r18
     b4a:	73 9f       	mul	r23, r19
     b4c:	b0 0d       	add	r27, r0
     b4e:	a1 1d       	adc	r26, r1
     b50:	62 1f       	adc	r22, r18
     b52:	83 9f       	mul	r24, r19
     b54:	a0 0d       	add	r26, r0
     b56:	61 1d       	adc	r22, r1
     b58:	22 1f       	adc	r18, r18
     b5a:	74 9f       	mul	r23, r20
     b5c:	33 27       	eor	r19, r19
     b5e:	a0 0d       	add	r26, r0
     b60:	61 1d       	adc	r22, r1
     b62:	23 1f       	adc	r18, r19
     b64:	84 9f       	mul	r24, r20
     b66:	60 0d       	add	r22, r0
     b68:	21 1d       	adc	r18, r1
     b6a:	82 2f       	mov	r24, r18
     b6c:	76 2f       	mov	r23, r22
     b6e:	6a 2f       	mov	r22, r26
     b70:	11 24       	eor	r1, r1
     b72:	9f 57       	subi	r25, 0x7F	; 127
     b74:	50 40       	sbci	r21, 0x00	; 0
     b76:	9a f0       	brmi	.+38     	; 0xb9e <__mulsf3_pse+0x88>
     b78:	f1 f0       	breq	.+60     	; 0xbb6 <__mulsf3_pse+0xa0>
     b7a:	88 23       	and	r24, r24
     b7c:	4a f0       	brmi	.+18     	; 0xb90 <__mulsf3_pse+0x7a>
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	bb 1f       	adc	r27, r27
     b84:	66 1f       	adc	r22, r22
     b86:	77 1f       	adc	r23, r23
     b88:	88 1f       	adc	r24, r24
     b8a:	91 50       	subi	r25, 0x01	; 1
     b8c:	50 40       	sbci	r21, 0x00	; 0
     b8e:	a9 f7       	brne	.-22     	; 0xb7a <__mulsf3_pse+0x64>
     b90:	9e 3f       	cpi	r25, 0xFE	; 254
     b92:	51 05       	cpc	r21, r1
     b94:	80 f0       	brcs	.+32     	; 0xbb6 <__mulsf3_pse+0xa0>
     b96:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_inf>
     b9a:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_szero>
     b9e:	5f 3f       	cpi	r21, 0xFF	; 255
     ba0:	e4 f3       	brlt	.-8      	; 0xb9a <__mulsf3_pse+0x84>
     ba2:	98 3e       	cpi	r25, 0xE8	; 232
     ba4:	d4 f3       	brlt	.-12     	; 0xb9a <__mulsf3_pse+0x84>
     ba6:	86 95       	lsr	r24
     ba8:	77 95       	ror	r23
     baa:	67 95       	ror	r22
     bac:	b7 95       	ror	r27
     bae:	f7 95       	ror	r31
     bb0:	e7 95       	ror	r30
     bb2:	9f 5f       	subi	r25, 0xFF	; 255
     bb4:	c1 f7       	brne	.-16     	; 0xba6 <__mulsf3_pse+0x90>
     bb6:	fe 2b       	or	r31, r30
     bb8:	88 0f       	add	r24, r24
     bba:	91 1d       	adc	r25, r1
     bbc:	96 95       	lsr	r25
     bbe:	87 95       	ror	r24
     bc0:	97 f9       	bld	r25, 7
     bc2:	08 95       	ret

00000bc4 <__udivmodsi4>:
     bc4:	a1 e2       	ldi	r26, 0x21	; 33
     bc6:	1a 2e       	mov	r1, r26
     bc8:	aa 1b       	sub	r26, r26
     bca:	bb 1b       	sub	r27, r27
     bcc:	fd 01       	movw	r30, r26
     bce:	0d c0       	rjmp	.+26     	; 0xbea <__udivmodsi4_ep>

00000bd0 <__udivmodsi4_loop>:
     bd0:	aa 1f       	adc	r26, r26
     bd2:	bb 1f       	adc	r27, r27
     bd4:	ee 1f       	adc	r30, r30
     bd6:	ff 1f       	adc	r31, r31
     bd8:	a2 17       	cp	r26, r18
     bda:	b3 07       	cpc	r27, r19
     bdc:	e4 07       	cpc	r30, r20
     bde:	f5 07       	cpc	r31, r21
     be0:	20 f0       	brcs	.+8      	; 0xbea <__udivmodsi4_ep>
     be2:	a2 1b       	sub	r26, r18
     be4:	b3 0b       	sbc	r27, r19
     be6:	e4 0b       	sbc	r30, r20
     be8:	f5 0b       	sbc	r31, r21

00000bea <__udivmodsi4_ep>:
     bea:	66 1f       	adc	r22, r22
     bec:	77 1f       	adc	r23, r23
     bee:	88 1f       	adc	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	1a 94       	dec	r1
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <__udivmodsi4_loop>
     bf6:	60 95       	com	r22
     bf8:	70 95       	com	r23
     bfa:	80 95       	com	r24
     bfc:	90 95       	com	r25
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	bd 01       	movw	r22, r26
     c04:	cf 01       	movw	r24, r30
     c06:	08 95       	ret

00000c08 <dtostrf>:
     c08:	ef 92       	push	r14
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	e8 01       	movw	r28, r16
     c14:	47 fd       	sbrc	r20, 7
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <dtostrf+0x14>
     c18:	34 e0       	ldi	r19, 0x04	; 4
     c1a:	01 c0       	rjmp	.+2      	; 0xc1e <dtostrf+0x16>
     c1c:	34 e1       	ldi	r19, 0x14	; 20
     c1e:	04 2e       	mov	r0, r20
     c20:	00 0c       	add	r0, r0
     c22:	55 0b       	sbc	r21, r21
     c24:	57 ff       	sbrs	r21, 7
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <dtostrf+0x26>
     c28:	51 95       	neg	r21
     c2a:	41 95       	neg	r20
     c2c:	51 09       	sbc	r21, r1
     c2e:	e3 2e       	mov	r14, r19
     c30:	02 2f       	mov	r16, r18
     c32:	24 2f       	mov	r18, r20
     c34:	ae 01       	movw	r20, r28
     c36:	0e 94 49 06 	call	0xc92	; 0xc92 <dtoa_prf>
     c3a:	ce 01       	movw	r24, r28
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ef 90       	pop	r14
     c46:	08 95       	ret

00000c48 <__itoa_ncheck>:
     c48:	bb 27       	eor	r27, r27
     c4a:	4a 30       	cpi	r20, 0x0A	; 10
     c4c:	31 f4       	brne	.+12     	; 0xc5a <__itoa_ncheck+0x12>
     c4e:	99 23       	and	r25, r25
     c50:	22 f4       	brpl	.+8      	; 0xc5a <__itoa_ncheck+0x12>
     c52:	bd e2       	ldi	r27, 0x2D	; 45
     c54:	90 95       	com	r25
     c56:	81 95       	neg	r24
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__utoa_common>

00000c5e <__utoa_ncheck>:
     c5e:	bb 27       	eor	r27, r27

00000c60 <__utoa_common>:
     c60:	fb 01       	movw	r30, r22
     c62:	55 27       	eor	r21, r21
     c64:	aa 27       	eor	r26, r26
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	aa 1f       	adc	r26, r26
     c6c:	a4 17       	cp	r26, r20
     c6e:	10 f0       	brcs	.+4      	; 0xc74 <__utoa_common+0x14>
     c70:	a4 1b       	sub	r26, r20
     c72:	83 95       	inc	r24
     c74:	50 51       	subi	r21, 0x10	; 16
     c76:	b9 f7       	brne	.-18     	; 0xc66 <__utoa_common+0x6>
     c78:	a0 5d       	subi	r26, 0xD0	; 208
     c7a:	aa 33       	cpi	r26, 0x3A	; 58
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <__utoa_common+0x20>
     c7e:	a9 5d       	subi	r26, 0xD9	; 217
     c80:	a1 93       	st	Z+, r26
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	79 f7       	brne	.-34     	; 0xc64 <__utoa_common+0x4>
     c86:	b1 11       	cpse	r27, r1
     c88:	b1 93       	st	Z+, r27
     c8a:	11 92       	st	Z+, r1
     c8c:	cb 01       	movw	r24, r22
     c8e:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <strrev>

00000c92 <dtoa_prf>:
     c92:	a9 e0       	ldi	r26, 0x09	; 9
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ef e4       	ldi	r30, 0x4F	; 79
     c98:	f6 e0       	ldi	r31, 0x06	; 6
     c9a:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__prologue_saves__+0xc>
     c9e:	6a 01       	movw	r12, r20
     ca0:	12 2f       	mov	r17, r18
     ca2:	b0 2e       	mov	r11, r16
     ca4:	2b e3       	ldi	r18, 0x3B	; 59
     ca6:	20 17       	cp	r18, r16
     ca8:	20 f0       	brcs	.+8      	; 0xcb2 <dtoa_prf+0x20>
     caa:	ff 24       	eor	r15, r15
     cac:	f3 94       	inc	r15
     cae:	f0 0e       	add	r15, r16
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <dtoa_prf+0x24>
     cb2:	2c e3       	ldi	r18, 0x3C	; 60
     cb4:	f2 2e       	mov	r15, r18
     cb6:	0f 2d       	mov	r16, r15
     cb8:	27 e0       	ldi	r18, 0x07	; 7
     cba:	ae 01       	movw	r20, r28
     cbc:	4f 5f       	subi	r20, 0xFF	; 255
     cbe:	5f 4f       	sbci	r21, 0xFF	; 255
     cc0:	0e 94 a3 07 	call	0xf46	; 0xf46 <__ftoa_engine>
     cc4:	bc 01       	movw	r22, r24
     cc6:	49 81       	ldd	r20, Y+1	; 0x01
     cc8:	84 2f       	mov	r24, r20
     cca:	89 70       	andi	r24, 0x09	; 9
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	31 f0       	breq	.+12     	; 0xcdc <dtoa_prf+0x4a>
     cd0:	e1 fc       	sbrc	r14, 1
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <dtoa_prf+0x4e>
     cd4:	e0 fe       	sbrs	r14, 0
     cd6:	06 c0       	rjmp	.+12     	; 0xce4 <dtoa_prf+0x52>
     cd8:	90 e2       	ldi	r25, 0x20	; 32
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <dtoa_prf+0x54>
     cdc:	9d e2       	ldi	r25, 0x2D	; 45
     cde:	03 c0       	rjmp	.+6      	; 0xce6 <dtoa_prf+0x54>
     ce0:	9b e2       	ldi	r25, 0x2B	; 43
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <dtoa_prf+0x54>
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	5e 2d       	mov	r21, r14
     ce8:	50 71       	andi	r21, 0x10	; 16
     cea:	43 ff       	sbrs	r20, 3
     cec:	3c c0       	rjmp	.+120    	; 0xd66 <dtoa_prf+0xd4>
     cee:	91 11       	cpse	r25, r1
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <dtoa_prf+0x64>
     cf2:	83 e0       	ldi	r24, 0x03	; 3
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <dtoa_prf+0x66>
     cf6:	84 e0       	ldi	r24, 0x04	; 4
     cf8:	81 17       	cp	r24, r17
     cfa:	18 f4       	brcc	.+6      	; 0xd02 <dtoa_prf+0x70>
     cfc:	21 2f       	mov	r18, r17
     cfe:	28 1b       	sub	r18, r24
     d00:	01 c0       	rjmp	.+2      	; 0xd04 <dtoa_prf+0x72>
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	51 11       	cpse	r21, r1
     d06:	0b c0       	rjmp	.+22     	; 0xd1e <dtoa_prf+0x8c>
     d08:	f6 01       	movw	r30, r12
     d0a:	82 2f       	mov	r24, r18
     d0c:	30 e2       	ldi	r19, 0x20	; 32
     d0e:	88 23       	and	r24, r24
     d10:	19 f0       	breq	.+6      	; 0xd18 <dtoa_prf+0x86>
     d12:	31 93       	st	Z+, r19
     d14:	81 50       	subi	r24, 0x01	; 1
     d16:	fb cf       	rjmp	.-10     	; 0xd0e <dtoa_prf+0x7c>
     d18:	c2 0e       	add	r12, r18
     d1a:	d1 1c       	adc	r13, r1
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	99 23       	and	r25, r25
     d20:	29 f0       	breq	.+10     	; 0xd2c <dtoa_prf+0x9a>
     d22:	d6 01       	movw	r26, r12
     d24:	9c 93       	st	X, r25
     d26:	f6 01       	movw	r30, r12
     d28:	31 96       	adiw	r30, 0x01	; 1
     d2a:	6f 01       	movw	r12, r30
     d2c:	c6 01       	movw	r24, r12
     d2e:	03 96       	adiw	r24, 0x03	; 3
     d30:	e2 fe       	sbrs	r14, 2
     d32:	0a c0       	rjmp	.+20     	; 0xd48 <dtoa_prf+0xb6>
     d34:	3e e4       	ldi	r19, 0x4E	; 78
     d36:	d6 01       	movw	r26, r12
     d38:	3c 93       	st	X, r19
     d3a:	41 e4       	ldi	r20, 0x41	; 65
     d3c:	11 96       	adiw	r26, 0x01	; 1
     d3e:	4c 93       	st	X, r20
     d40:	11 97       	sbiw	r26, 0x01	; 1
     d42:	12 96       	adiw	r26, 0x02	; 2
     d44:	3c 93       	st	X, r19
     d46:	06 c0       	rjmp	.+12     	; 0xd54 <dtoa_prf+0xc2>
     d48:	3e e6       	ldi	r19, 0x6E	; 110
     d4a:	f6 01       	movw	r30, r12
     d4c:	30 83       	st	Z, r19
     d4e:	41 e6       	ldi	r20, 0x61	; 97
     d50:	41 83       	std	Z+1, r20	; 0x01
     d52:	32 83       	std	Z+2, r19	; 0x02
     d54:	fc 01       	movw	r30, r24
     d56:	32 2f       	mov	r19, r18
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	33 23       	and	r19, r19
     d5c:	09 f4       	brne	.+2      	; 0xd60 <dtoa_prf+0xce>
     d5e:	42 c0       	rjmp	.+132    	; 0xde4 <dtoa_prf+0x152>
     d60:	41 93       	st	Z+, r20
     d62:	31 50       	subi	r19, 0x01	; 1
     d64:	fa cf       	rjmp	.-12     	; 0xd5a <dtoa_prf+0xc8>
     d66:	42 ff       	sbrs	r20, 2
     d68:	44 c0       	rjmp	.+136    	; 0xdf2 <dtoa_prf+0x160>
     d6a:	91 11       	cpse	r25, r1
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <dtoa_prf+0xe0>
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <dtoa_prf+0xe2>
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	81 17       	cp	r24, r17
     d76:	18 f4       	brcc	.+6      	; 0xd7e <dtoa_prf+0xec>
     d78:	21 2f       	mov	r18, r17
     d7a:	28 1b       	sub	r18, r24
     d7c:	01 c0       	rjmp	.+2      	; 0xd80 <dtoa_prf+0xee>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	51 11       	cpse	r21, r1
     d82:	0b c0       	rjmp	.+22     	; 0xd9a <dtoa_prf+0x108>
     d84:	f6 01       	movw	r30, r12
     d86:	82 2f       	mov	r24, r18
     d88:	30 e2       	ldi	r19, 0x20	; 32
     d8a:	88 23       	and	r24, r24
     d8c:	19 f0       	breq	.+6      	; 0xd94 <dtoa_prf+0x102>
     d8e:	31 93       	st	Z+, r19
     d90:	81 50       	subi	r24, 0x01	; 1
     d92:	fb cf       	rjmp	.-10     	; 0xd8a <dtoa_prf+0xf8>
     d94:	c2 0e       	add	r12, r18
     d96:	d1 1c       	adc	r13, r1
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	99 23       	and	r25, r25
     d9c:	29 f0       	breq	.+10     	; 0xda8 <dtoa_prf+0x116>
     d9e:	d6 01       	movw	r26, r12
     da0:	9c 93       	st	X, r25
     da2:	f6 01       	movw	r30, r12
     da4:	31 96       	adiw	r30, 0x01	; 1
     da6:	6f 01       	movw	r12, r30
     da8:	c6 01       	movw	r24, r12
     daa:	03 96       	adiw	r24, 0x03	; 3
     dac:	e2 fe       	sbrs	r14, 2
     dae:	0b c0       	rjmp	.+22     	; 0xdc6 <dtoa_prf+0x134>
     db0:	39 e4       	ldi	r19, 0x49	; 73
     db2:	d6 01       	movw	r26, r12
     db4:	3c 93       	st	X, r19
     db6:	3e e4       	ldi	r19, 0x4E	; 78
     db8:	11 96       	adiw	r26, 0x01	; 1
     dba:	3c 93       	st	X, r19
     dbc:	11 97       	sbiw	r26, 0x01	; 1
     dbe:	36 e4       	ldi	r19, 0x46	; 70
     dc0:	12 96       	adiw	r26, 0x02	; 2
     dc2:	3c 93       	st	X, r19
     dc4:	07 c0       	rjmp	.+14     	; 0xdd4 <dtoa_prf+0x142>
     dc6:	39 e6       	ldi	r19, 0x69	; 105
     dc8:	f6 01       	movw	r30, r12
     dca:	30 83       	st	Z, r19
     dcc:	3e e6       	ldi	r19, 0x6E	; 110
     dce:	31 83       	std	Z+1, r19	; 0x01
     dd0:	36 e6       	ldi	r19, 0x66	; 102
     dd2:	32 83       	std	Z+2, r19	; 0x02
     dd4:	fc 01       	movw	r30, r24
     dd6:	32 2f       	mov	r19, r18
     dd8:	40 e2       	ldi	r20, 0x20	; 32
     dda:	33 23       	and	r19, r19
     ddc:	19 f0       	breq	.+6      	; 0xde4 <dtoa_prf+0x152>
     dde:	41 93       	st	Z+, r20
     de0:	31 50       	subi	r19, 0x01	; 1
     de2:	fb cf       	rjmp	.-10     	; 0xdda <dtoa_prf+0x148>
     de4:	fc 01       	movw	r30, r24
     de6:	e2 0f       	add	r30, r18
     de8:	f1 1d       	adc	r31, r1
     dea:	10 82       	st	Z, r1
     dec:	8e ef       	ldi	r24, 0xFE	; 254
     dee:	9f ef       	ldi	r25, 0xFF	; 255
     df0:	a6 c0       	rjmp	.+332    	; 0xf3e <dtoa_prf+0x2ac>
     df2:	21 e0       	ldi	r18, 0x01	; 1
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	91 11       	cpse	r25, r1
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <dtoa_prf+0x16c>
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	16 16       	cp	r1, r22
     e00:	17 06       	cpc	r1, r23
     e02:	1c f4       	brge	.+6      	; 0xe0a <dtoa_prf+0x178>
     e04:	fb 01       	movw	r30, r22
     e06:	31 96       	adiw	r30, 0x01	; 1
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <dtoa_prf+0x17c>
     e0a:	e1 e0       	ldi	r30, 0x01	; 1
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	2e 0f       	add	r18, r30
     e10:	3f 1f       	adc	r19, r31
     e12:	bb 20       	and	r11, r11
     e14:	21 f0       	breq	.+8      	; 0xe1e <dtoa_prf+0x18c>
     e16:	eb 2d       	mov	r30, r11
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	31 96       	adiw	r30, 0x01	; 1
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <dtoa_prf+0x190>
     e1e:	e0 e0       	ldi	r30, 0x00	; 0
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	2e 0f       	add	r18, r30
     e24:	3f 1f       	adc	r19, r31
     e26:	e1 2f       	mov	r30, r17
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	2e 17       	cp	r18, r30
     e2c:	3f 07       	cpc	r19, r31
     e2e:	1c f4       	brge	.+6      	; 0xe36 <dtoa_prf+0x1a4>
     e30:	12 1b       	sub	r17, r18
     e32:	21 2f       	mov	r18, r17
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <dtoa_prf+0x1a6>
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	8e 2d       	mov	r24, r14
     e3a:	88 71       	andi	r24, 0x18	; 24
     e3c:	59 f4       	brne	.+22     	; 0xe54 <dtoa_prf+0x1c2>
     e3e:	f6 01       	movw	r30, r12
     e40:	82 2f       	mov	r24, r18
     e42:	30 e2       	ldi	r19, 0x20	; 32
     e44:	88 23       	and	r24, r24
     e46:	19 f0       	breq	.+6      	; 0xe4e <dtoa_prf+0x1bc>
     e48:	31 93       	st	Z+, r19
     e4a:	81 50       	subi	r24, 0x01	; 1
     e4c:	fb cf       	rjmp	.-10     	; 0xe44 <dtoa_prf+0x1b2>
     e4e:	c2 0e       	add	r12, r18
     e50:	d1 1c       	adc	r13, r1
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	99 23       	and	r25, r25
     e56:	29 f0       	breq	.+10     	; 0xe62 <dtoa_prf+0x1d0>
     e58:	d6 01       	movw	r26, r12
     e5a:	9c 93       	st	X, r25
     e5c:	f6 01       	movw	r30, r12
     e5e:	31 96       	adiw	r30, 0x01	; 1
     e60:	6f 01       	movw	r12, r30
     e62:	51 11       	cpse	r21, r1
     e64:	0b c0       	rjmp	.+22     	; 0xe7c <dtoa_prf+0x1ea>
     e66:	f6 01       	movw	r30, r12
     e68:	82 2f       	mov	r24, r18
     e6a:	90 e3       	ldi	r25, 0x30	; 48
     e6c:	88 23       	and	r24, r24
     e6e:	19 f0       	breq	.+6      	; 0xe76 <dtoa_prf+0x1e4>
     e70:	91 93       	st	Z+, r25
     e72:	81 50       	subi	r24, 0x01	; 1
     e74:	fb cf       	rjmp	.-10     	; 0xe6c <dtoa_prf+0x1da>
     e76:	c2 0e       	add	r12, r18
     e78:	d1 1c       	adc	r13, r1
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	0f 2d       	mov	r16, r15
     e7e:	06 0f       	add	r16, r22
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	34 2f       	mov	r19, r20
     e84:	30 71       	andi	r19, 0x10	; 16
     e86:	44 ff       	sbrs	r20, 4
     e88:	03 c0       	rjmp	.+6      	; 0xe90 <dtoa_prf+0x1fe>
     e8a:	91 33       	cpi	r25, 0x31	; 49
     e8c:	09 f4       	brne	.+2      	; 0xe90 <dtoa_prf+0x1fe>
     e8e:	01 50       	subi	r16, 0x01	; 1
     e90:	10 16       	cp	r1, r16
     e92:	24 f4       	brge	.+8      	; 0xe9c <dtoa_prf+0x20a>
     e94:	09 30       	cpi	r16, 0x09	; 9
     e96:	18 f0       	brcs	.+6      	; 0xe9e <dtoa_prf+0x20c>
     e98:	08 e0       	ldi	r16, 0x08	; 8
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <dtoa_prf+0x20c>
     e9c:	01 e0       	ldi	r16, 0x01	; 1
     e9e:	ab 01       	movw	r20, r22
     ea0:	77 ff       	sbrs	r23, 7
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <dtoa_prf+0x216>
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	fb 01       	movw	r30, r22
     eaa:	e4 1b       	sub	r30, r20
     eac:	f5 0b       	sbc	r31, r21
     eae:	a1 e0       	ldi	r26, 0x01	; 1
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ac 0f       	add	r26, r28
     eb4:	bd 1f       	adc	r27, r29
     eb6:	ea 0f       	add	r30, r26
     eb8:	fb 1f       	adc	r31, r27
     eba:	8e e2       	ldi	r24, 0x2E	; 46
     ebc:	a8 2e       	mov	r10, r24
     ebe:	4b 01       	movw	r8, r22
     ec0:	80 1a       	sub	r8, r16
     ec2:	91 08       	sbc	r9, r1
     ec4:	0b 2d       	mov	r16, r11
     ec6:	10 e0       	ldi	r17, 0x00	; 0
     ec8:	11 95       	neg	r17
     eca:	01 95       	neg	r16
     ecc:	11 09       	sbc	r17, r1
     ece:	4f 3f       	cpi	r20, 0xFF	; 255
     ed0:	bf ef       	ldi	r27, 0xFF	; 255
     ed2:	5b 07       	cpc	r21, r27
     ed4:	21 f4       	brne	.+8      	; 0xede <dtoa_prf+0x24c>
     ed6:	d6 01       	movw	r26, r12
     ed8:	ac 92       	st	X, r10
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	6d 01       	movw	r12, r26
     ede:	64 17       	cp	r22, r20
     ee0:	75 07       	cpc	r23, r21
     ee2:	2c f0       	brlt	.+10     	; 0xeee <dtoa_prf+0x25c>
     ee4:	84 16       	cp	r8, r20
     ee6:	95 06       	cpc	r9, r21
     ee8:	14 f4       	brge	.+4      	; 0xeee <dtoa_prf+0x25c>
     eea:	81 81       	ldd	r24, Z+1	; 0x01
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <dtoa_prf+0x25e>
     eee:	80 e3       	ldi	r24, 0x30	; 48
     ef0:	41 50       	subi	r20, 0x01	; 1
     ef2:	51 09       	sbc	r21, r1
     ef4:	31 96       	adiw	r30, 0x01	; 1
     ef6:	d6 01       	movw	r26, r12
     ef8:	11 96       	adiw	r26, 0x01	; 1
     efa:	7d 01       	movw	r14, r26
     efc:	40 17       	cp	r20, r16
     efe:	51 07       	cpc	r21, r17
     f00:	24 f0       	brlt	.+8      	; 0xf0a <dtoa_prf+0x278>
     f02:	d6 01       	movw	r26, r12
     f04:	8c 93       	st	X, r24
     f06:	67 01       	movw	r12, r14
     f08:	e2 cf       	rjmp	.-60     	; 0xece <dtoa_prf+0x23c>
     f0a:	64 17       	cp	r22, r20
     f0c:	75 07       	cpc	r23, r21
     f0e:	39 f4       	brne	.+14     	; 0xf1e <dtoa_prf+0x28c>
     f10:	96 33       	cpi	r25, 0x36	; 54
     f12:	20 f4       	brcc	.+8      	; 0xf1c <dtoa_prf+0x28a>
     f14:	95 33       	cpi	r25, 0x35	; 53
     f16:	19 f4       	brne	.+6      	; 0xf1e <dtoa_prf+0x28c>
     f18:	31 11       	cpse	r19, r1
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <dtoa_prf+0x28c>
     f1c:	81 e3       	ldi	r24, 0x31	; 49
     f1e:	f6 01       	movw	r30, r12
     f20:	80 83       	st	Z, r24
     f22:	f7 01       	movw	r30, r14
     f24:	82 2f       	mov	r24, r18
     f26:	90 e2       	ldi	r25, 0x20	; 32
     f28:	88 23       	and	r24, r24
     f2a:	19 f0       	breq	.+6      	; 0xf32 <dtoa_prf+0x2a0>
     f2c:	91 93       	st	Z+, r25
     f2e:	81 50       	subi	r24, 0x01	; 1
     f30:	fb cf       	rjmp	.-10     	; 0xf28 <dtoa_prf+0x296>
     f32:	f7 01       	movw	r30, r14
     f34:	e2 0f       	add	r30, r18
     f36:	f1 1d       	adc	r31, r1
     f38:	10 82       	st	Z, r1
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	29 96       	adiw	r28, 0x09	; 9
     f40:	ec e0       	ldi	r30, 0x0C	; 12
     f42:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__epilogue_restores__+0xc>

00000f46 <__ftoa_engine>:
     f46:	28 30       	cpi	r18, 0x08	; 8
     f48:	08 f0       	brcs	.+2      	; 0xf4c <__ftoa_engine+0x6>
     f4a:	27 e0       	ldi	r18, 0x07	; 7
     f4c:	33 27       	eor	r19, r19
     f4e:	da 01       	movw	r26, r20
     f50:	99 0f       	add	r25, r25
     f52:	31 1d       	adc	r19, r1
     f54:	87 fd       	sbrc	r24, 7
     f56:	91 60       	ori	r25, 0x01	; 1
     f58:	00 96       	adiw	r24, 0x00	; 0
     f5a:	61 05       	cpc	r22, r1
     f5c:	71 05       	cpc	r23, r1
     f5e:	39 f4       	brne	.+14     	; 0xf6e <__ftoa_engine+0x28>
     f60:	32 60       	ori	r19, 0x02	; 2
     f62:	2e 5f       	subi	r18, 0xFE	; 254
     f64:	3d 93       	st	X+, r19
     f66:	30 e3       	ldi	r19, 0x30	; 48
     f68:	2a 95       	dec	r18
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <__ftoa_engine+0x1e>
     f6c:	08 95       	ret
     f6e:	9f 3f       	cpi	r25, 0xFF	; 255
     f70:	30 f0       	brcs	.+12     	; 0xf7e <__ftoa_engine+0x38>
     f72:	80 38       	cpi	r24, 0x80	; 128
     f74:	71 05       	cpc	r23, r1
     f76:	61 05       	cpc	r22, r1
     f78:	09 f0       	breq	.+2      	; 0xf7c <__ftoa_engine+0x36>
     f7a:	3c 5f       	subi	r19, 0xFC	; 252
     f7c:	3c 5f       	subi	r19, 0xFC	; 252
     f7e:	3d 93       	st	X+, r19
     f80:	91 30       	cpi	r25, 0x01	; 1
     f82:	08 f0       	brcs	.+2      	; 0xf86 <__ftoa_engine+0x40>
     f84:	80 68       	ori	r24, 0x80	; 128
     f86:	91 1d       	adc	r25, r1
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	1f 93       	push	r17
     f8e:	0f 93       	push	r16
     f90:	ff 92       	push	r15
     f92:	ef 92       	push	r14
     f94:	19 2f       	mov	r17, r25
     f96:	98 7f       	andi	r25, 0xF8	; 248
     f98:	96 95       	lsr	r25
     f9a:	e9 2f       	mov	r30, r25
     f9c:	96 95       	lsr	r25
     f9e:	96 95       	lsr	r25
     fa0:	e9 0f       	add	r30, r25
     fa2:	ff 27       	eor	r31, r31
     fa4:	ee 53       	subi	r30, 0x3E	; 62
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	99 27       	eor	r25, r25
     faa:	33 27       	eor	r19, r19
     fac:	ee 24       	eor	r14, r14
     fae:	ff 24       	eor	r15, r15
     fb0:	a7 01       	movw	r20, r14
     fb2:	e7 01       	movw	r28, r14
     fb4:	05 90       	lpm	r0, Z+
     fb6:	08 94       	sec
     fb8:	07 94       	ror	r0
     fba:	28 f4       	brcc	.+10     	; 0xfc6 <__ftoa_engine+0x80>
     fbc:	36 0f       	add	r19, r22
     fbe:	e7 1e       	adc	r14, r23
     fc0:	f8 1e       	adc	r15, r24
     fc2:	49 1f       	adc	r20, r25
     fc4:	51 1d       	adc	r21, r1
     fc6:	66 0f       	add	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	88 1f       	adc	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	06 94       	lsr	r0
     fd0:	a1 f7       	brne	.-24     	; 0xfba <__ftoa_engine+0x74>
     fd2:	05 90       	lpm	r0, Z+
     fd4:	07 94       	ror	r0
     fd6:	28 f4       	brcc	.+10     	; 0xfe2 <__ftoa_engine+0x9c>
     fd8:	e7 0e       	add	r14, r23
     fda:	f8 1e       	adc	r15, r24
     fdc:	49 1f       	adc	r20, r25
     fde:	56 1f       	adc	r21, r22
     fe0:	c1 1d       	adc	r28, r1
     fe2:	77 0f       	add	r23, r23
     fe4:	88 1f       	adc	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	66 1f       	adc	r22, r22
     fea:	06 94       	lsr	r0
     fec:	a1 f7       	brne	.-24     	; 0xfd6 <__ftoa_engine+0x90>
     fee:	05 90       	lpm	r0, Z+
     ff0:	07 94       	ror	r0
     ff2:	28 f4       	brcc	.+10     	; 0xffe <__ftoa_engine+0xb8>
     ff4:	f8 0e       	add	r15, r24
     ff6:	49 1f       	adc	r20, r25
     ff8:	56 1f       	adc	r21, r22
     ffa:	c7 1f       	adc	r28, r23
     ffc:	d1 1d       	adc	r29, r1
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	66 1f       	adc	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	06 94       	lsr	r0
    1008:	a1 f7       	brne	.-24     	; 0xff2 <__ftoa_engine+0xac>
    100a:	05 90       	lpm	r0, Z+
    100c:	07 94       	ror	r0
    100e:	20 f4       	brcc	.+8      	; 0x1018 <__ftoa_engine+0xd2>
    1010:	49 0f       	add	r20, r25
    1012:	56 1f       	adc	r21, r22
    1014:	c7 1f       	adc	r28, r23
    1016:	d8 1f       	adc	r29, r24
    1018:	99 0f       	add	r25, r25
    101a:	66 1f       	adc	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	88 1f       	adc	r24, r24
    1020:	06 94       	lsr	r0
    1022:	a9 f7       	brne	.-22     	; 0x100e <__ftoa_engine+0xc8>
    1024:	84 91       	lpm	r24, Z
    1026:	10 95       	com	r17
    1028:	17 70       	andi	r17, 0x07	; 7
    102a:	41 f0       	breq	.+16     	; 0x103c <__ftoa_engine+0xf6>
    102c:	d6 95       	lsr	r29
    102e:	c7 95       	ror	r28
    1030:	57 95       	ror	r21
    1032:	47 95       	ror	r20
    1034:	f7 94       	ror	r15
    1036:	e7 94       	ror	r14
    1038:	1a 95       	dec	r17
    103a:	c1 f7       	brne	.-16     	; 0x102c <__ftoa_engine+0xe6>
    103c:	e8 e6       	ldi	r30, 0x68	; 104
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	68 94       	set
    1042:	15 90       	lpm	r1, Z+
    1044:	15 91       	lpm	r17, Z+
    1046:	35 91       	lpm	r19, Z+
    1048:	65 91       	lpm	r22, Z+
    104a:	95 91       	lpm	r25, Z+
    104c:	05 90       	lpm	r0, Z+
    104e:	7f e2       	ldi	r23, 0x2F	; 47
    1050:	73 95       	inc	r23
    1052:	e1 18       	sub	r14, r1
    1054:	f1 0a       	sbc	r15, r17
    1056:	43 0b       	sbc	r20, r19
    1058:	56 0b       	sbc	r21, r22
    105a:	c9 0b       	sbc	r28, r25
    105c:	d0 09       	sbc	r29, r0
    105e:	c0 f7       	brcc	.-16     	; 0x1050 <__ftoa_engine+0x10a>
    1060:	e1 0c       	add	r14, r1
    1062:	f1 1e       	adc	r15, r17
    1064:	43 1f       	adc	r20, r19
    1066:	56 1f       	adc	r21, r22
    1068:	c9 1f       	adc	r28, r25
    106a:	d0 1d       	adc	r29, r0
    106c:	7e f4       	brtc	.+30     	; 0x108c <__ftoa_engine+0x146>
    106e:	70 33       	cpi	r23, 0x30	; 48
    1070:	11 f4       	brne	.+4      	; 0x1076 <__ftoa_engine+0x130>
    1072:	8a 95       	dec	r24
    1074:	e6 cf       	rjmp	.-52     	; 0x1042 <__ftoa_engine+0xfc>
    1076:	e8 94       	clt
    1078:	01 50       	subi	r16, 0x01	; 1
    107a:	30 f0       	brcs	.+12     	; 0x1088 <__ftoa_engine+0x142>
    107c:	08 0f       	add	r16, r24
    107e:	0a f4       	brpl	.+2      	; 0x1082 <__ftoa_engine+0x13c>
    1080:	00 27       	eor	r16, r16
    1082:	02 17       	cp	r16, r18
    1084:	08 f4       	brcc	.+2      	; 0x1088 <__ftoa_engine+0x142>
    1086:	20 2f       	mov	r18, r16
    1088:	23 95       	inc	r18
    108a:	02 2f       	mov	r16, r18
    108c:	7a 33       	cpi	r23, 0x3A	; 58
    108e:	28 f0       	brcs	.+10     	; 0x109a <__ftoa_engine+0x154>
    1090:	79 e3       	ldi	r23, 0x39	; 57
    1092:	7d 93       	st	X+, r23
    1094:	2a 95       	dec	r18
    1096:	e9 f7       	brne	.-6      	; 0x1092 <__ftoa_engine+0x14c>
    1098:	10 c0       	rjmp	.+32     	; 0x10ba <__ftoa_engine+0x174>
    109a:	7d 93       	st	X+, r23
    109c:	2a 95       	dec	r18
    109e:	89 f6       	brne	.-94     	; 0x1042 <__ftoa_engine+0xfc>
    10a0:	06 94       	lsr	r0
    10a2:	97 95       	ror	r25
    10a4:	67 95       	ror	r22
    10a6:	37 95       	ror	r19
    10a8:	17 95       	ror	r17
    10aa:	17 94       	ror	r1
    10ac:	e1 18       	sub	r14, r1
    10ae:	f1 0a       	sbc	r15, r17
    10b0:	43 0b       	sbc	r20, r19
    10b2:	56 0b       	sbc	r21, r22
    10b4:	c9 0b       	sbc	r28, r25
    10b6:	d0 09       	sbc	r29, r0
    10b8:	98 f0       	brcs	.+38     	; 0x10e0 <__ftoa_engine+0x19a>
    10ba:	23 95       	inc	r18
    10bc:	7e 91       	ld	r23, -X
    10be:	73 95       	inc	r23
    10c0:	7a 33       	cpi	r23, 0x3A	; 58
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__ftoa_engine+0x180>
    10c4:	70 e3       	ldi	r23, 0x30	; 48
    10c6:	7c 93       	st	X, r23
    10c8:	20 13       	cpse	r18, r16
    10ca:	b8 f7       	brcc	.-18     	; 0x10ba <__ftoa_engine+0x174>
    10cc:	7e 91       	ld	r23, -X
    10ce:	70 61       	ori	r23, 0x10	; 16
    10d0:	7d 93       	st	X+, r23
    10d2:	30 f0       	brcs	.+12     	; 0x10e0 <__ftoa_engine+0x19a>
    10d4:	83 95       	inc	r24
    10d6:	71 e3       	ldi	r23, 0x31	; 49
    10d8:	7d 93       	st	X+, r23
    10da:	70 e3       	ldi	r23, 0x30	; 48
    10dc:	2a 95       	dec	r18
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <__ftoa_engine+0x192>
    10e0:	11 24       	eor	r1, r1
    10e2:	ef 90       	pop	r14
    10e4:	ff 90       	pop	r15
    10e6:	0f 91       	pop	r16
    10e8:	1f 91       	pop	r17
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	99 27       	eor	r25, r25
    10f0:	87 fd       	sbrc	r24, 7
    10f2:	90 95       	com	r25
    10f4:	08 95       	ret

000010f6 <strrev>:
    10f6:	dc 01       	movw	r26, r24
    10f8:	fc 01       	movw	r30, r24
    10fa:	67 2f       	mov	r22, r23
    10fc:	71 91       	ld	r23, Z+
    10fe:	77 23       	and	r23, r23
    1100:	e1 f7       	brne	.-8      	; 0x10fa <strrev+0x4>
    1102:	32 97       	sbiw	r30, 0x02	; 2
    1104:	04 c0       	rjmp	.+8      	; 0x110e <strrev+0x18>
    1106:	7c 91       	ld	r23, X
    1108:	6d 93       	st	X+, r22
    110a:	70 83       	st	Z, r23
    110c:	62 91       	ld	r22, -Z
    110e:	ae 17       	cp	r26, r30
    1110:	bf 07       	cpc	r27, r31
    1112:	c8 f3       	brcs	.-14     	; 0x1106 <strrev+0x10>
    1114:	08 95       	ret

00001116 <__prologue_saves__>:
    1116:	2f 92       	push	r2
    1118:	3f 92       	push	r3
    111a:	4f 92       	push	r4
    111c:	5f 92       	push	r5
    111e:	6f 92       	push	r6
    1120:	7f 92       	push	r7
    1122:	8f 92       	push	r8
    1124:	9f 92       	push	r9
    1126:	af 92       	push	r10
    1128:	bf 92       	push	r11
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	ca 1b       	sub	r28, r26
    1140:	db 0b       	sbc	r29, r27
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	09 94       	ijmp

0000114e <__epilogue_restores__>:
    114e:	2a 88       	ldd	r2, Y+18	; 0x12
    1150:	39 88       	ldd	r3, Y+17	; 0x11
    1152:	48 88       	ldd	r4, Y+16	; 0x10
    1154:	5f 84       	ldd	r5, Y+15	; 0x0f
    1156:	6e 84       	ldd	r6, Y+14	; 0x0e
    1158:	7d 84       	ldd	r7, Y+13	; 0x0d
    115a:	8c 84       	ldd	r8, Y+12	; 0x0c
    115c:	9b 84       	ldd	r9, Y+11	; 0x0b
    115e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1160:	b9 84       	ldd	r11, Y+9	; 0x09
    1162:	c8 84       	ldd	r12, Y+8	; 0x08
    1164:	df 80       	ldd	r13, Y+7	; 0x07
    1166:	ee 80       	ldd	r14, Y+6	; 0x06
    1168:	fd 80       	ldd	r15, Y+5	; 0x05
    116a:	0c 81       	ldd	r16, Y+4	; 0x04
    116c:	1b 81       	ldd	r17, Y+3	; 0x03
    116e:	aa 81       	ldd	r26, Y+2	; 0x02
    1170:	b9 81       	ldd	r27, Y+1	; 0x01
    1172:	ce 0f       	add	r28, r30
    1174:	d1 1d       	adc	r29, r1
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	ed 01       	movw	r28, r26
    1182:	08 95       	ret

00001184 <_exit>:
    1184:	f8 94       	cli

00001186 <__stop_program>:
    1186:	ff cf       	rjmp	.-2      	; 0x1186 <__stop_program>
