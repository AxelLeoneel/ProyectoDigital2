
Slave_motorDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000924  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007df  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000505  00000000  00000000  000014af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000413  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000154  00000000  00000000  00001eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001fff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  88:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_adc>:
#include <avr/io.h>
#include "ADClib.h"

void init_adc()
{
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1 << MUX0);
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);
  9c:	80 81       	ld	r24, Z
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24

	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
  ae:	80 81       	ld	r24, Z
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);								//Interrupcion
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC);							//ADC
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <setup>:


/********************************************************************/
/*---------------------Non-interrupt Subroutines--------------------*/
void setup(){
	cli();
  c8:	f8 94       	cli
	
	
	DDRD |= (1 << PORTD2);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD2);
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	8b b9       	out	0x0b, r24	; 11
	
	init_adc();
  d6:	0e 94 48 00 	call	0x90	; 0x90 <init_adc>
	init_pwm1(non_invert, 8);
  da:	68 e0       	ldi	r22, 0x08	; 8
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 b7 00 	call	0x16e	; 0x16e <init_pwm1>

	
	sei();
  e4:	78 94       	sei
  e6:	08 95       	ret

000000e8 <main>:

/********************************************************************/
/*------------------------------Main--------------------------------*/
int main(void)
{
	setup();
  e8:	0e 94 64 00 	call	0xc8	; 0xc8 <setup>
	
	while (1)
	{
		ADCSRA |= (1 << ADSC);
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	80 e7       	ldi	r24, 0x70	; 112
  fa:	92 e0       	ldi	r25, 0x02	; 2
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x14>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x1e>
 106:	00 00       	nop
 108:	f1 cf       	rjmp	.-30     	; 0xec <main+0x4>

0000010a <__vector_21>:


/********************************************************************/
/*----------------------Interrupt Subroutines-----------------------*/
ISR(ADC_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
	adc_value = ADCH;
 12c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	uint16_t pwm_value = 10 + (adc_value * 2);
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 142:	05 96       	adiw	r24, 0x05	; 5
	
	DutyCycle1(pwm_value);
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	0e 94 16 01 	call	0x22c	; 0x22c <DutyCycle1>
}
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	7f 91       	pop	r23
 15a:	6f 91       	pop	r22
 15c:	5f 91       	pop	r21
 15e:	4f 91       	pop	r20
 160:	3f 91       	pop	r19
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <init_pwm1>:
#include "PWMlib.h"


void init_pwm1(uint8_t invertido, uint16_t prescaler)
{
	DDRB |= (1 << PORTB1);
 16e:	94 b1       	in	r25, 0x04	; 4
 170:	92 60       	ori	r25, 0x02	; 2
 172:	94 b9       	out	0x04, r25	; 4
	
	TCCR1A = 0;						//Limpieza de bits
 174:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 178:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	//-----------------------------------------------//
	if(invertido == invert){
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	31 f4       	brne	.+12     	; 0x18c <init_pwm1+0x1e>
		TCCR1A |= (1 << COM1A0) | (1 << COM1A1);
 180:	e0 e8       	ldi	r30, 0x80	; 128
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 6c       	ori	r24, 0xC0	; 192
 188:	80 83       	st	Z, r24
 18a:	05 c0       	rjmp	.+10     	; 0x196 <init_pwm1+0x28>
	}
	else{
		TCCR1A |= (1 << COM1A1);
 18c:	e0 e8       	ldi	r30, 0x80	; 128
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 68       	ori	r24, 0x80	; 128
 194:	80 83       	st	Z, r24
	}
	//-----------------------------------------------//
	TCCR1A |= (1 << WGM11);						//Seleccionamos FAST MODE
 196:	e0 e8       	ldi	r30, 0x80	; 128
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
 1a0:	e1 e8       	ldi	r30, 0x81	; 129
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	88 61       	ori	r24, 0x18	; 24
 1a8:	80 83       	st	Z, r24
	//-----------------------------------------------//
	switch(prescaler){
 1aa:	60 34       	cpi	r22, 0x40	; 64
 1ac:	71 05       	cpc	r23, r1
 1ae:	e1 f0       	breq	.+56     	; 0x1e8 <init_pwm1+0x7a>
 1b0:	38 f4       	brcc	.+14     	; 0x1c0 <init_pwm1+0x52>
 1b2:	61 30       	cpi	r22, 0x01	; 1
 1b4:	71 05       	cpc	r23, r1
 1b6:	61 f0       	breq	.+24     	; 0x1d0 <init_pwm1+0x62>
 1b8:	68 30       	cpi	r22, 0x08	; 8
 1ba:	71 05       	cpc	r23, r1
 1bc:	79 f0       	breq	.+30     	; 0x1dc <init_pwm1+0x6e>
 1be:	26 c0       	rjmp	.+76     	; 0x20c <init_pwm1+0x9e>
 1c0:	61 15       	cp	r22, r1
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	78 07       	cpc	r23, r24
 1c6:	b1 f0       	breq	.+44     	; 0x1f4 <init_pwm1+0x86>
 1c8:	61 15       	cp	r22, r1
 1ca:	74 40       	sbci	r23, 0x04	; 4
 1cc:	c9 f0       	breq	.+50     	; 0x200 <init_pwm1+0x92>
 1ce:	1e c0       	rjmp	.+60     	; 0x20c <init_pwm1+0x9e>
		case 1:
		TCCR1B |= (1 << CS10);
 1d0:	e1 e8       	ldi	r30, 0x81	; 129
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	80 83       	st	Z, r24
		break;
 1da:	1d c0       	rjmp	.+58     	; 0x216 <init_pwm1+0xa8>
		
		case 8:
		TCCR1B |= (1 << CS11);
 1dc:	e1 e8       	ldi	r30, 0x81	; 129
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	80 83       	st	Z, r24
		break;
 1e6:	17 c0       	rjmp	.+46     	; 0x216 <init_pwm1+0xa8>
		
		case 64:
		TCCR1B |= (1 << CS11) | (1 << CS10);
 1e8:	e1 e8       	ldi	r30, 0x81	; 129
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	83 60       	ori	r24, 0x03	; 3
 1f0:	80 83       	st	Z, r24
		break;
 1f2:	11 c0       	rjmp	.+34     	; 0x216 <init_pwm1+0xa8>
		
		case 256:
		TCCR1B |= (1 << CS12);
 1f4:	e1 e8       	ldi	r30, 0x81	; 129
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	84 60       	ori	r24, 0x04	; 4
 1fc:	80 83       	st	Z, r24
		break;
 1fe:	0b c0       	rjmp	.+22     	; 0x216 <init_pwm1+0xa8>
		
		case 1024:
		TCCR1B |= (1 << CS12) | (1 << CS10);
 200:	e1 e8       	ldi	r30, 0x81	; 129
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	85 60       	ori	r24, 0x05	; 5
 208:	80 83       	st	Z, r24
		break;
 20a:	05 c0       	rjmp	.+10     	; 0x216 <init_pwm1+0xa8>
		
		default:
		TCCR1B |= (1 << CS10);
 20c:	e1 e8       	ldi	r30, 0x81	; 129
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	81 60       	ori	r24, 0x01	; 1
 214:	80 83       	st	Z, r24
		break;
	}
	
	ICR1 = 3999;
 216:	8f e9       	ldi	r24, 0x9F	; 159
 218:	9f e0       	ldi	r25, 0x0F	; 15
 21a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 21e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	OCR1A = 0;
 222:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 226:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 22a:	08 95       	ret

0000022c <DutyCycle1>:

}

void DutyCycle1(uint16_t DT1)
{
	if(DT1 > ICR1) DT1 = ICR1;
 22c:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 230:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 234:	28 17       	cp	r18, r24
 236:	39 07       	cpc	r19, r25
 238:	20 f4       	brcc	.+8      	; 0x242 <DutyCycle1+0x16>
 23a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 23e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	OCR1A = DT1;
 242:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 246:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 24a:	08 95       	ret

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
